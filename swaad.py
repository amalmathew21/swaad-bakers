# -*- coding: utf-8 -*-


# Form implementation generated from reading ui file 'new.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMessageBox
from PyQt5.QtWidgets import *
import sqlite3
import webbrowser
from reportlab.pdfgen import canvas
from datetime import datetime

global B
global r
global d
r=0
B=0
d=94


class Ui_Swaad(object):
    def setupUi(self, Swaad):
        Swaad.setObjectName("Swaad")
        Swaad.resize(905, 600)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(20)
        font.setBold(True)
        font.setWeight(75)
        Swaad.setFont(font)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(":/newPrefix/logo.jpg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        Swaad.setWindowIcon(icon)
        self.centralwidget = QtWidgets.QWidget(Swaad)
        self.centralwidget.setObjectName("centralwidget")
        self.stackedWidget = QtWidgets.QStackedWidget(self.centralwidget)
        self.stackedWidget.setGeometry(QtCore.QRect(0, 0, 821, 601))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(20)
        font.setBold(True)
        font.setWeight(75)
        self.stackedWidget.setFont(font)
        self.stackedWidget.setStyleSheet("background:rgb(170, 255, 255)")
        self.stackedWidget.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.stackedWidget.setFrameShadow(QtWidgets.QFrame.Raised)
        self.stackedWidget.setObjectName("stackedWidget")
        self.page = QtWidgets.QWidget()
        self.page.setObjectName("page")
        self.frame = QtWidgets.QFrame(self.page)
        self.frame.setGeometry(QtCore.QRect(0, 60, 161, 81))
        self.frame.setStyleSheet("image:url(:/newPrefix/logo.jpg)\n"
                                 "")
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.widget = QtWidgets.QWidget(self.page)
        self.widget.setGeometry(QtCore.QRect(140, 160, 501, 371))
        self.widget.setStyleSheet("background-color: rgb(225, 251, 230);")
        self.widget.setObjectName("widget")
        self.label = QtWidgets.QLabel(self.widget)
        self.label.setGeometry(QtCore.QRect(190, 10, 131, 41))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(20)
        font.setBold(True)
        font.setItalic(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setStyleSheet("color: rgb(0, 0, 0);\n"
                                 "background-color: qlineargradient(spread:pad, x1:0.725, y1:0.971591, x2:0.898, y2:0.164545, stop:0 rgba(255, 0, 0, 255), stop:1 rgba(255, 255, 255, 255));")
        self.label.setObjectName("label")
        self.frame_3 = QtWidgets.QFrame(self.widget)
        self.frame_3.setGeometry(QtCore.QRect(80, 100, 81, 71))
        self.frame_3.setStyleSheet("image:url(:/newPrefix/user.png)")
        self.frame_3.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_3.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_3.setObjectName("frame_3")
        self.frame_2 = QtWidgets.QFrame(self.widget)
        self.frame_2.setGeometry(QtCore.QRect(80, 210, 81, 71))
        self.frame_2.setStyleSheet("image:url(:/newPrefix/password.png)")
        self.frame_2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_2.setObjectName("frame_2")
        self.lineEdit_loginuser = QtWidgets.QLineEdit(self.widget)
        self.lineEdit_loginuser.setGeometry(QtCore.QRect(252, 119, 141, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        font.setBold(False)
        font.setWeight(50)
        self.lineEdit_loginuser.setFont(font)
        self.lineEdit_loginuser.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEdit_loginuser.setCursorMoveStyle(QtCore.Qt.VisualMoveStyle)
        self.lineEdit_loginuser.setObjectName("lineEdit_loginuser")
        self.lineEdit_loginpass = QtWidgets.QLineEdit(self.widget)
        self.lineEdit_loginpass.setGeometry(QtCore.QRect(252, 230, 141, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        font.setBold(False)
        font.setWeight(50)
        self.lineEdit_loginpass.setFont(font)
        self.lineEdit_loginpass.setEchoMode(QtWidgets.QLineEdit.Password)
        self.lineEdit_loginpass.setAlignment(QtCore.Qt.AlignBottom | QtCore.Qt.AlignHCenter)
        self.lineEdit_loginpass.setObjectName("lineEdit_loginpass")
        self.pushButton_login = QtWidgets.QPushButton(self.widget)
        self.pushButton_login.setGeometry(QtCore.QRect(190, 300, 111, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(16)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.pushButton_login.setFont(font)
        self.pushButton_login.setStyleSheet("\n"
                                            "background-color: qlineargradient(spread:pad, x1:0.315, y1:0.966091, x2:0.898, y2:0.164545, stop:0 rgba(255, 191, 135, 255), stop:1 rgba(255, 255, 255, 255));\n"
                                            "color:rgb(0, 0, 0)")
        self.pushButton_login.setObjectName("pushButton_login")
        self.stackedWidget.addWidget(self.page)
        self.page_2 = QtWidgets.QWidget()
        self.page_2.setObjectName("page_2")
        self.widget_2 = QtWidgets.QWidget(self.page_2)
        self.widget_2.setGeometry(QtCore.QRect(140, 160, 501, 371))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(8)
        font.setBold(False)
        font.setWeight(50)
        self.widget_2.setFont(font)
        self.widget_2.setStyleSheet("background-color: rgb(225, 251, 230);")
        self.widget_2.setObjectName("widget_2")
        self.label_2 = QtWidgets.QLabel(self.widget_2)
        self.label_2.setGeometry(QtCore.QRect(190, 10, 131, 41))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(20)
        font.setBold(True)
        font.setItalic(True)
        font.setWeight(75)
        self.label_2.setFont(font)
        self.label_2.setStyleSheet(
            "background-color: qlineargradient(spread:pad, x1:0.912045, y1:0.932, x2:0.898, y2:0.164545, stop:0 rgba(255, 0, 0, 255), stop:1 rgba(255, 255, 255, 255));")
        self.label_2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.label_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.label_2.setAlignment(QtCore.Qt.AlignCenter)
        self.label_2.setObjectName("label_2")
        self.frame_6 = QtWidgets.QFrame(self.widget_2)
        self.frame_6.setGeometry(QtCore.QRect(80, 100, 81, 71))
        self.frame_6.setStyleSheet("image: url(:/newPrefix/user.png);")
        self.frame_6.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_6.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_6.setObjectName("frame_6")
        self.frame_5 = QtWidgets.QFrame(self.widget_2)
        self.frame_5.setGeometry(QtCore.QRect(80, 210, 81, 71))
        self.frame_5.setStyleSheet("image:url(:/newPrefix/password.png)")
        self.frame_5.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_5.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_5.setObjectName("frame_5")
        self.lineEdit_signuser = QtWidgets.QLineEdit(self.widget_2)
        self.lineEdit_signuser.setGeometry(QtCore.QRect(252, 119, 141, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(16)
        font.setBold(False)
        font.setWeight(50)
        self.lineEdit_signuser.setFont(font)
        self.lineEdit_signuser.setAlignment(QtCore.Qt.AlignLeading | QtCore.Qt.AlignLeft | QtCore.Qt.AlignVCenter)
        self.lineEdit_signuser.setObjectName("lineEdit_signuser")
        self.lineEdit_signpass = QtWidgets.QLineEdit(self.widget_2)
        self.lineEdit_signpass.setGeometry(QtCore.QRect(252, 230, 141, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(16)
        font.setBold(False)
        font.setWeight(50)
        self.lineEdit_signpass.setFont(font)
        self.lineEdit_signpass.setEchoMode(QtWidgets.QLineEdit.Password)
        self.lineEdit_signpass.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEdit_signpass.setObjectName("lineEdit_signpass")
        self.pushButton_signin = QtWidgets.QPushButton(self.widget_2)
        self.pushButton_signin.setGeometry(QtCore.QRect(10, 310, 111, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_signin.setFont(font)
        self.pushButton_signin.setStyleSheet(
            "background-color: qlineargradient(spread:pad, x1:0.315, y1:0.966091, x2:0.898, y2:0.164545, stop:0 rgba(255, 191, 135, 255), stop:1 rgba(255, 255, 255, 255));\n"
            "color:rgb(0, 0, 0)")
        self.pushButton_signin.setObjectName("pushButton_signin")
        self.pushButton_delete = QtWidgets.QPushButton(self.widget_2)
        self.pushButton_delete.setGeometry(QtCore.QRect(380, 310, 111, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_delete.setFont(font)
        self.pushButton_delete.setStyleSheet(
            "background-color: qlineargradient(spread:pad, x1:0.315, y1:0.966091, x2:0.898, y2:0.164545, stop:0 rgba(255, 191, 135, 255), stop:1 rgba(255, 255, 255, 255));\n"
            "color:rgb(0, 0, 0)")
        self.pushButton_delete.setObjectName("pushButton_delete")
        self.frame_4 = QtWidgets.QFrame(self.page_2)
        self.frame_4.setGeometry(QtCore.QRect(0, 60, 161, 81))
        self.frame_4.setStyleSheet("image: url(:/newPrefix/logo.jpg);")
        self.frame_4.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_4.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_4.setObjectName("frame_4")
        self.stackedWidget.addWidget(self.page_2)
        self.page_3 = QtWidgets.QWidget()
        self.page_3.setEnabled(True)
        self.page_3.setObjectName("page_3")
        self.frame_7 = QtWidgets.QFrame(self.page_3)
        self.frame_7.setGeometry(QtCore.QRect(0, 60, 161, 81))
        self.frame_7.setStyleSheet("image:url(:/newPrefix/logo.jpg)")
        self.frame_7.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_7.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_7.setObjectName("frame_7")
        self.widget_3 = QtWidgets.QWidget(self.page_3)
        self.widget_3.setGeometry(QtCore.QRect(140, 160, 501, 371))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(20)
        font.setBold(False)
        font.setWeight(50)
        self.widget_3.setFont(font)
        self.widget_3.setStyleSheet("background-color: rgb(225, 251, 230);")
        self.widget_3.setObjectName("widget_3")
        self.pushButton_admin_category = QtWidgets.QPushButton(self.widget_3)
        self.pushButton_admin_category.setGeometry(QtCore.QRect(40, 40, 150, 35))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(16)
        font.setBold(True)
        font.setItalic(True)
        font.setWeight(75)
        self.pushButton_admin_category.setFont(font)
        self.pushButton_admin_category.setStyleSheet(
            "background-color: qlineargradient(spread:pad, x1:0.315, y1:0.966091, x2:0.898, y2:0.164545, stop:0 rgba(255, 191, 135, 255), stop:1 rgba(255, 255, 255, 255));\n"
            "color:rgb(0, 0, 0)")
        self.pushButton_admin_category.setObjectName("pushButton_admin_category")
        self.pushButton_admin_products = QtWidgets.QPushButton(self.widget_3)
        self.pushButton_admin_products.setGeometry(QtCore.QRect(40, 130, 150, 35))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(16)
        font.setBold(True)
        font.setItalic(True)
        font.setWeight(75)
        self.pushButton_admin_products.setFont(font)
        self.pushButton_admin_products.setStyleSheet(
            "background-color: qlineargradient(spread:pad, x1:0.315, y1:0.966091, x2:0.898, y2:0.164545, stop:0 rgba(255, 191, 135, 255), stop:1 rgba(255, 255, 255, 255));\n"
            "color:rgb(0, 0, 0)")
        self.pushButton_admin_products.setObjectName("pushButton_admin_products")
        self.pushButton_admin_purchase = QtWidgets.QPushButton(self.widget_3)
        self.pushButton_admin_purchase.setGeometry(QtCore.QRect(40, 220, 150, 35))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        font.setBold(True)
        font.setItalic(True)
        font.setWeight(75)
        self.pushButton_admin_purchase.setFont(font)
        self.pushButton_admin_purchase.setStyleSheet(
            "background-color: qlineargradient(spread:pad, x1:0.315, y1:0.966091, x2:0.898, y2:0.164545, stop:0 rgba(255, 191, 135, 255), stop:1 rgba(255, 255, 255, 255));\n"
            "color:rgb(0, 0, 0)")
        self.pushButton_admin_purchase.setObjectName("pushButton_admin_purchase")
        self.pushButton_admin_order = QtWidgets.QPushButton(self.widget_3)
        self.pushButton_admin_order.setGeometry(QtCore.QRect(310, 40, 150, 35))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(16)
        font.setBold(True)
        font.setItalic(True)
        font.setWeight(75)
        self.pushButton_admin_order.setFont(font)
        self.pushButton_admin_order.setStyleSheet(
            "background-color: qlineargradient(spread:pad, x1:0.315, y1:0.966091, x2:0.898, y2:0.164545, stop:0 rgba(255, 191, 135, 255), stop:1 rgba(255, 255, 255, 255));\n"
            "color:rgb(0, 0, 0)")
        self.pushButton_admin_order.setObjectName("pushButton_admin_order")
        self.pushButton_admin_report = QtWidgets.QPushButton(self.widget_3)
        self.pushButton_admin_report.setGeometry(QtCore.QRect(310, 130, 150, 35))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(15)
        font.setBold(True)
        font.setItalic(True)
        font.setWeight(75)
        self.pushButton_admin_report.setFont(font)
        self.pushButton_admin_report.setStyleSheet(
            "background-color: qlineargradient(spread:pad, x1:0.315, y1:0.966091, x2:0.898, y2:0.164545, stop:0 rgba(255, 191, 135, 255), stop:1 rgba(255, 255, 255, 255));\n"
            "color:rgb(0, 0, 0)")
        self.pushButton_admin_report.setObjectName("pushButton_admin_report")
        self.pushButton_createuser = QtWidgets.QPushButton(self.widget_3)
        self.pushButton_createuser.setGeometry(QtCore.QRect(310, 220, 150, 35))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(16)
        font.setBold(True)
        font.setItalic(True)
        font.setWeight(75)
        self.pushButton_createuser.setFont(font)
        self.pushButton_createuser.setStyleSheet(
            "background-color: qlineargradient(spread:pad, x1:0.315, y1:0.966091, x2:0.898, y2:0.164545, stop:0 rgba(255, 191, 135, 255), stop:1 rgba(255, 255, 255, 255));\n"
            "color:rgb(0, 0, 0)")
        self.pushButton_createuser.setObjectName("pushButton_createuser")
        self.pushButton_admin_logout = QtWidgets.QPushButton(self.widget_3)
        self.pushButton_admin_logout.setGeometry(QtCore.QRect(180, 300, 150, 35))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(16)
        font.setBold(True)
        font.setItalic(True)
        font.setWeight(75)
        self.pushButton_admin_logout.setFont(font)
        self.pushButton_admin_logout.setStyleSheet(
            "background-color: qlineargradient(spread:pad, x1:0.315, y1:0.966091, x2:0.898, y2:0.164545, stop:0 rgba(255, 191, 135, 255), stop:1 rgba(255, 255, 255, 255));\n"
            "color:rgb(0, 0, 0)")
        self.pushButton_admin_logout.setObjectName("pushButton_admin_logout")
        self.lineEdit_admin = QtWidgets.QLineEdit(self.page_3)
        self.lineEdit_admin.setEnabled(True)
        self.lineEdit_admin.setGeometry(QtCore.QRect(550, 30, 113, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(20)
        font.setBold(True)
        font.setItalic(True)
        font.setWeight(75)
        self.lineEdit_admin.setFont(font)
        self.lineEdit_admin.setStyleSheet(
            "background-color: qlineargradient(spread:pad, x1:0.912045, y1:0.932, x2:0.898, y2:0.164545, stop:0 rgba(255, 0, 0, 255), stop:1 rgba(255, 255, 255, 255));")
        self.lineEdit_admin.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEdit_admin.setProperty("setEnabled", False)
        self.lineEdit_admin.setObjectName("lineEdit_admin")
        self.stackedWidget.addWidget(self.page_3)
        self.page_4 = QtWidgets.QWidget()
        self.page_4.setEnabled(True)
        self.page_4.setObjectName("page_4")
        self.widget_4 = QtWidgets.QWidget(self.page_4)
        self.widget_4.setGeometry(QtCore.QRect(140, 160, 501, 371))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(16)
        font.setBold(True)
        font.setItalic(True)
        font.setWeight(75)
        self.widget_4.setFont(font)
        self.widget_4.setStyleSheet("background-color: rgb(225, 251, 230);")
        self.widget_4.setObjectName("widget_4")
        self.pushButton_user_category = QtWidgets.QPushButton(self.widget_4)
        self.pushButton_user_category.setGeometry(QtCore.QRect(40, 40, 150, 35))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(16)
        font.setBold(True)
        font.setItalic(True)
        font.setWeight(75)
        self.pushButton_user_category.setFont(font)
        self.pushButton_user_category.setStyleSheet(
            "background-color: qlineargradient(spread:pad, x1:0.315, y1:0.966091, x2:0.898, y2:0.164545, stop:0 rgba(255, 191, 135, 255), stop:1 rgba(255, 255, 255, 255));\n"
            "color:rgb(0, 0, 0)")
        self.pushButton_user_category.setObjectName("pushButton_user_category")
        self.pushButton_user_products = QtWidgets.QPushButton(self.widget_4)
        self.pushButton_user_products.setGeometry(QtCore.QRect(40, 130, 150, 35))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(16)
        font.setBold(True)
        font.setItalic(True)
        font.setWeight(75)
        self.pushButton_user_products.setFont(font)
        self.pushButton_user_products.setStyleSheet(
            "background-color: qlineargradient(spread:pad, x1:0.315, y1:0.966091, x2:0.898, y2:0.164545, stop:0 rgba(255, 191, 135, 255), stop:1 rgba(255, 255, 255, 255));\n"
            "color:rgb(0, 0, 0)")
        self.pushButton_user_products.setObjectName("pushButton_user_products")
        self.pushButton_user_purchase = QtWidgets.QPushButton(self.widget_4)
        self.pushButton_user_purchase.setGeometry(QtCore.QRect(40, 220, 150, 35))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        font.setBold(True)
        font.setItalic(True)
        font.setWeight(75)
        self.pushButton_user_purchase.setFont(font)
        self.pushButton_user_purchase.setStyleSheet(
            "background-color: qlineargradient(spread:pad, x1:0.315, y1:0.966091, x2:0.898, y2:0.164545, stop:0 rgba(255, 191, 135, 255), stop:1 rgba(255, 255, 255, 255));\n"
            "color:rgb(0, 0, 0)")
        self.pushButton_user_purchase.setObjectName("pushButton_user_purchase")
        self.pushButton_user_order = QtWidgets.QPushButton(self.widget_4)
        self.pushButton_user_order.setEnabled(True)
        self.pushButton_user_order.setGeometry(QtCore.QRect(310, 40, 150, 35))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(16)
        font.setBold(True)
        font.setItalic(True)
        font.setWeight(75)
        self.pushButton_user_order.setFont(font)
        self.pushButton_user_order.setStyleSheet(
            "background-color: qlineargradient(spread:pad, x1:0.315, y1:0.966091, x2:0.898, y2:0.164545, stop:0 rgba(255, 191, 135, 255), stop:1 rgba(255, 255, 255, 255));\n"
            "color:rgb(0, 0, 0)")
        self.pushButton_user_order.setObjectName("pushButton_user_order")
        self.pushButton_user_report = QtWidgets.QPushButton(self.widget_4)
        self.pushButton_user_report.setGeometry(QtCore.QRect(310, 130, 150, 35))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        font.setBold(True)
        font.setItalic(True)
        font.setWeight(75)
        self.pushButton_user_report.setFont(font)
        self.pushButton_user_report.setStyleSheet(
            "background-color: qlineargradient(spread:pad, x1:0.315, y1:0.966091, x2:0.898, y2:0.164545, stop:0 rgba(255, 191, 135, 255), stop:1 rgba(255, 255, 255, 255));\n"
            "color:rgb(0, 0, 0)")
        self.pushButton_user_report.setObjectName("pushButton_user_report")
        self.pushButton_userlogout = QtWidgets.QPushButton(self.widget_4)
        self.pushButton_userlogout.setGeometry(QtCore.QRect(310, 220, 150, 35))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(16)
        font.setBold(True)
        font.setItalic(True)
        font.setWeight(75)
        self.pushButton_userlogout.setFont(font)
        self.pushButton_userlogout.setStyleSheet(
            "background-color: qlineargradient(spread:pad, x1:0.315, y1:0.966091, x2:0.898, y2:0.164545, stop:0 rgba(255, 191, 135, 255), stop:1 rgba(255, 255, 255, 255));\n"
            "color:rgb(0, 0, 0)")
        self.pushButton_userlogout.setObjectName("pushButton_userlogout")
        self.frame_8 = QtWidgets.QFrame(self.page_4)
        self.frame_8.setGeometry(QtCore.QRect(0, 60, 161, 81))
        self.frame_8.setStyleSheet("image: url(:/newPrefix/logo.jpg);")
        self.frame_8.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_8.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_8.setObjectName("frame_8")
        self.lineEdit_user = QtWidgets.QLineEdit(self.page_4)
        self.lineEdit_user.setEnabled(True)
        self.lineEdit_user.setGeometry(QtCore.QRect(550, 30, 113, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(18)
        font.setBold(True)
        font.setItalic(True)
        font.setWeight(75)
        self.lineEdit_user.setFont(font)
        self.lineEdit_user.setStyleSheet(
            "background-color:qlineargradient(spread:pad, x1:0.912045, y1:0.932, x2:0.898, y2:0.164545, stop:0 rgba(255, 0, 0, 255), stop:1 rgba(255, 255, 255, 255))")
        self.lineEdit_user.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEdit_user.setProperty("setEnabled", False)
        self.lineEdit_user.setObjectName("lineEdit_user")
        self.stackedWidget.addWidget(self.page_4)
        self.page_5 = QtWidgets.QWidget()
        self.page_5.setEnabled(True)
        self.page_5.setObjectName("page_5")
        self.widget_5 = QtWidgets.QWidget(self.page_5)
        self.widget_5.setGeometry(QtCore.QRect(140, 160, 501, 371))
        self.widget_5.setStyleSheet("background-color: rgb(225, 251, 230);")
        self.widget_5.setObjectName("widget_5")
        self.label_3 = QtWidgets.QLabel(self.widget_5)
        self.label_3.setGeometry(QtCore.QRect(160, 20, 181, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(16)
        font.setBold(True)
        font.setItalic(True)
        font.setWeight(75)
        self.label_3.setFont(font)
        self.label_3.setStyleSheet(
            "color: qradialgradient(spread:repeat, cx:0.5, cy:0.5, radius:0.077, fx:0.5, fy:0.5, stop:0 rgba(0, 85, 255, 147), stop:0.948864 rgba(0, 85, 255, 192), stop:1 rgba(0, 169, 255, 147));\n"
            "background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:0.0681818, y2:0.0625, stop:0 rgba(0, 0, 0, 255), stop:1 rgba(255, 255, 255, 255));")
        self.label_3.setAlignment(QtCore.Qt.AlignCenter)
        self.label_3.setObjectName("label_3")
        self.label_4 = QtWidgets.QLabel(self.widget_5)
        self.label_4.setGeometry(QtCore.QRect(100, 110, 40, 16))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.label_4.setFont(font)
        self.label_4.setObjectName("label_4")
        self.label_5 = QtWidgets.QLabel(self.widget_5)
        self.label_5.setGeometry(QtCore.QRect(100, 190, 61, 16))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.label_5.setFont(font)
        self.label_5.setObjectName("label_5")
        self.dateEdit = QtWidgets.QDateEdit(self.widget_5)
        self.dateEdit.setDateTime(QtCore.QDateTime.currentDateTime())
        self.dateEdit.setGeometry(QtCore.QRect(310, 110, 110, 25))
        self.dateEdit.setCalendarPopup(True)
        self.dateEdit.setObjectName("dateEdit")
        self.dateEdit_1 = QtWidgets.QDateEdit(self.widget_5)
        self.dateEdit_1.setDateTime(QtCore.QDateTime.currentDateTime())
        self.dateEdit_1.setGeometry(QtCore.QRect(310, 190, 110, 25))
        self.dateEdit_1.setCalendarPopup(True)
        self.dateEdit_1.setObjectName("dateEdit_1")
        self.pushButton_profit_report = QtWidgets.QPushButton(self.widget_5)
        self.pushButton_profit_report.setGeometry(QtCore.QRect(70, 290, 141, 25))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(16)
        font.setBold(True)
        font.setItalic(True)
        font.setWeight(75)
        self.pushButton_profit_report.setFont(font)
        self.pushButton_profit_report.setStyleSheet(
            "background-color: qlineargradient(spread:pad, x1:0.315, y1:0.966091, x2:0.898, y2:0.164545, stop:0 rgba(255, 191, 135, 255), stop:1 rgba(255, 255, 255, 255));\n"
            "color:rgb(0, 0, 0)")
        self.pushButton_profit_report.setObjectName("pushButton_profit_report")
        self.pushButton_sales_report = QtWidgets.QPushButton(self.widget_5)
        self.pushButton_sales_report.setGeometry(QtCore.QRect(280, 290, 141, 25))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(16)
        font.setBold(True)
        font.setItalic(True)
        font.setWeight(75)
        self.pushButton_sales_report.setFont(font)
        self.pushButton_sales_report.setStyleSheet(
            "background-color: qlineargradient(spread:pad, x1:0.315, y1:0.966091, x2:0.898, y2:0.164545, stop:0 rgba(255, 191, 135, 255), stop:1 rgba(255, 255, 255, 255));\n"
            "color:rgb(0, 0, 0)")
        self.pushButton_sales_report.setObjectName("pushButton_sales_report")
        self.frame_9 = QtWidgets.QFrame(self.page_5)
        self.frame_9.setGeometry(QtCore.QRect(0, 60, 161, 81))
        self.frame_9.setStyleSheet("image: url(:/newPrefix/logo.jpg);")
        self.frame_9.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_9.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_9.setObjectName("frame_9")
        self.lineEdit_salesreport = QtWidgets.QLineEdit(self.page_5)
        self.lineEdit_salesreport.setEnabled(False)
        self.lineEdit_salesreport.setGeometry(QtCore.QRect(550, 30, 113, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(18)
        font.setBold(True)
        font.setItalic(True)
        font.setWeight(75)
        self.lineEdit_salesreport.setFont(font)
        self.lineEdit_salesreport.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.lineEdit_salesreport.setStyleSheet(
            "background-color:qlineargradient(spread:pad, x1:0.912045, y1:0.932, x2:0.898, y2:0.164545, stop:0 rgba(255, 0, 0, 255), stop:1 rgba(255, 255, 255, 255))")
        self.lineEdit_salesreport.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEdit_salesreport.setObjectName("lineEdit_salesreport")
        self.toolButton_salesreport = QtWidgets.QToolButton(self.page_5)
        self.toolButton_salesreport.setGeometry(QtCore.QRect(300, 90, 50, 40))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.toolButton_salesreport.setFont(font)
        self.toolButton_salesreport.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.toolButton_salesreport.setStyleSheet("background:rgb(240, 240, 240)")
        self.toolButton_salesreport.setArrowType(QtCore.Qt.LeftArrow)
        self.toolButton_salesreport.setObjectName("toolButton_salesreport")
        self.stackedWidget.addWidget(self.page_5)
        self.page_6 = QtWidgets.QWidget()
        self.page_6.setEnabled(True)
        self.page_6.setObjectName("page_6")
        self.frame_10 = QtWidgets.QFrame(self.page_6)
        self.frame_10.setGeometry(QtCore.QRect(0, 60, 161, 81))
        self.frame_10.setStyleSheet("image: url(:/newPrefix/logo.jpg);")
        self.frame_10.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_10.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_10.setObjectName("frame_10")
        self.widget_6 = QtWidgets.QWidget(self.page_6)
        self.widget_6.setGeometry(QtCore.QRect(140, 160, 501, 371))
        self.widget_6.setStyleSheet("background-color: rgb(225, 251, 230);\n"
                                    "\n"
                                    "")
        self.widget_6.setObjectName("widget_6")
        self.label_6 = QtWidgets.QLabel(self.widget_6)
        self.label_6.setGeometry(QtCore.QRect(160, 20, 181, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(18)
        font.setBold(True)
        font.setItalic(True)
        font.setWeight(75)
        self.label_6.setFont(font)
        self.label_6.setStyleSheet(
            "color: qradialgradient(spread:repeat, cx:0.5, cy:0.5, radius:0.077, fx:0.5, fy:0.5, stop:0 rgba(0, 85, 255, 147), stop:0.948864 rgba(0, 85, 255, 192), stop:1 rgba(0, 169, 255, 147));\n"
            "background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:0.0681818, y2:0.0625, stop:0 rgba(0, 0, 0, 255), stop:1 rgba(255, 255, 255, 255));")
        self.label_6.setObjectName("label_6")
        self.label_7 = QtWidgets.QLabel(self.widget_6)
        self.label_7.setGeometry(QtCore.QRect(80, 110, 150, 35))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_7.setFont(font)
        self.label_7.setObjectName("label_7")
        self.label_8 = QtWidgets.QLabel(self.widget_6)
        self.label_8.setGeometry(QtCore.QRect(80, 190, 150, 35))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_8.setFont(font)
        self.label_8.setObjectName("label_8")
        self.lineEdit_catid = QtWidgets.QLineEdit(self.widget_6)
        self.lineEdit_catid.setGeometry(QtCore.QRect(280, 110, 150, 30))
        self.lineEdit_catid.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEdit_catid.setObjectName("lineEdit_catid")
        self.lineEdit_catname = QtWidgets.QLineEdit(self.widget_6)
        self.lineEdit_catname.setGeometry(QtCore.QRect(280, 190, 150, 30))
        self.lineEdit_catname.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEdit_catname.setObjectName("lineEdit_catname")
        self.pushButton_cat_add = QtWidgets.QPushButton(self.widget_6)
        self.pushButton_cat_add.setGeometry(QtCore.QRect(50, 300, 50, 40))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_cat_add.setFont(font)
        self.pushButton_cat_add.setStyleSheet("image:url(:/newPrefix/add.png)")
        self.pushButton_cat_add.setText("")
        self.pushButton_cat_add.setObjectName("pushButton_cat_add")
        self.pushButton_cat_update = QtWidgets.QPushButton(self.widget_6)
        self.pushButton_cat_update.setGeometry(QtCore.QRect(160, 300, 50, 40))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_cat_update.setFont(font)
        self.pushButton_cat_update.setStyleSheet("image:url(:/newPrefix/update.png)")
        self.pushButton_cat_update.setText("")
        self.pushButton_cat_update.setObjectName("pushButton_cat_update")
        self.pushButton_cat_delete = QtWidgets.QPushButton(self.widget_6)
        self.pushButton_cat_delete.setGeometry(QtCore.QRect(260, 300, 50, 40))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_cat_delete.setFont(font)
        self.pushButton_cat_delete.setStyleSheet("image:url(:/newPrefix/delete.png)")
        self.pushButton_cat_delete.setText("")
        self.pushButton_cat_delete.setObjectName("pushButton_cat_delete")
        self.pushButton_cat_clear = QtWidgets.QPushButton(self.widget_6)
        self.pushButton_cat_clear.setGeometry(QtCore.QRect(370, 300, 50, 40))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_cat_clear.setFont(font)
        self.pushButton_cat_clear.setStyleSheet("image:url(:/newPrefix/clears.png)")
        self.pushButton_cat_clear.setText("")
        self.pushButton_cat_clear.setObjectName("pushButton_cat_clear")
        self.toolButton_category = QtWidgets.QToolButton(self.page_6)
        self.toolButton_category.setGeometry(QtCore.QRect(300, 90, 50, 40))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.toolButton_category.setFont(font)
        self.toolButton_category.setStyleSheet("background:rgb(204, 204, 204)")
        self.toolButton_category.setArrowType(QtCore.Qt.LeftArrow)
        self.toolButton_category.setObjectName("toolButton_category")
        self.lineEdit_category = QtWidgets.QLineEdit(self.page_6)
        self.lineEdit_category.setEnabled(False)
        self.lineEdit_category.setGeometry(QtCore.QRect(550, 30, 113, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(16)
        font.setBold(True)
        font.setItalic(True)
        font.setWeight(75)
        self.lineEdit_category.setFont(font)
        self.lineEdit_category.setStyleSheet(
            "background-color: qlineargradient(spread:pad, x1:0.912045, y1:0.932, x2:0.898, y2:0.164545, stop:0 rgba(255, 0, 0, 255), stop:1 rgba(255, 255, 255, 255));")
        self.lineEdit_category.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEdit_category.setReadOnly(True)
        self.lineEdit_category.setObjectName("lineEdit_category")
        self.stackedWidget.addWidget(self.page_6)
        self.page_7 = QtWidgets.QWidget()
        self.page_7.setEnabled(True)
        self.page_7.setObjectName("page_7")
        self.frame_11 = QtWidgets.QFrame(self.page_7)
        self.frame_11.setGeometry(QtCore.QRect(0, 60, 161, 81))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(8)
        font.setBold(True)
        font.setWeight(75)
        self.frame_11.setFont(font)
        self.frame_11.setStyleSheet("image: url(:/newPrefix/logo.jpg);")
        self.frame_11.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_11.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_11.setObjectName("frame_11")
        self.widget_7 = QtWidgets.QWidget(self.page_7)
        self.widget_7.setGeometry(QtCore.QRect(140, 160, 501, 371))
        self.widget_7.setStyleSheet("background-color: rgb(225, 251, 230);")
        self.widget_7.setObjectName("widget_7")
        self.label_9 = QtWidgets.QLabel(self.widget_7)
        self.label_9.setGeometry(QtCore.QRect(160, 20, 181, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(16)
        font.setBold(True)
        font.setItalic(True)
        font.setWeight(75)
        self.label_9.setFont(font)
        self.label_9.setStyleSheet(
            "background:qlineargradient(spread:pad, x1:0, y1:0, x2:0.0681818, y2:0.0625, stop:0 rgba(0, 0, 0, 255), stop:1 rgba(255, 255, 255, 255));\n"
            "color: qradialgradient(spread:repeat, cx:0.5, cy:0.5, radius:0.077, fx:0.5, fy:0.5, stop:0 rgba(0, 85, 255, 147), stop:0.948864 rgba(0, 85, 255, 192), stop:1 rgba(0, 169, 255, 147));")
        self.label_9.setAlignment(QtCore.Qt.AlignCenter)
        self.label_9.setObjectName("label_9")
        self.label_10 = QtWidgets.QLabel(self.widget_7)
        self.label_10.setGeometry(QtCore.QRect(60, 60, 111, 25))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_10.setFont(font)
        self.label_10.setObjectName("label_10")
        self.label_11 = QtWidgets.QLabel(self.widget_7)
        self.label_11.setGeometry(QtCore.QRect(60, 90, 111, 25))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_11.setFont(font)
        self.label_11.setObjectName("label_11")
        self.label_12 = QtWidgets.QLabel(self.widget_7)
        self.label_12.setGeometry(QtCore.QRect(60, 120, 111, 25))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_12.setFont(font)
        self.label_12.setObjectName("label_12")
        self.label_13 = QtWidgets.QLabel(self.widget_7)
        self.label_13.setGeometry(QtCore.QRect(60, 150, 111, 25))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_13.setFont(font)
        self.label_13.setObjectName("label_13")
        self.label_14 = QtWidgets.QLabel(self.widget_7)
        self.label_14.setGeometry(QtCore.QRect(60, 180, 111, 25))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_14.setFont(font)
        self.label_14.setObjectName("label_14")
        self.label_15 = QtWidgets.QLabel(self.widget_7)
        self.label_15.setGeometry(QtCore.QRect(60, 210, 111, 25))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_15.setFont(font)
        self.label_15.setObjectName("label_15")
        self.label_16 = QtWidgets.QLabel(self.widget_7)
        self.label_16.setGeometry(QtCore.QRect(60, 240, 111, 25))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_16.setFont(font)
        self.label_16.setObjectName("label_16")
        self.lineEdit_productid = QtWidgets.QLineEdit(self.widget_7)
        self.lineEdit_productid.setGeometry(QtCore.QRect(260, 90, 125, 25))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        font.setBold(False)
        font.setWeight(50)
        self.lineEdit_productid.setFont(font)
        self.lineEdit_productid.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEdit_productid.setObjectName("lineEdit_productid")
        self.lineEdit_productname = QtWidgets.QLineEdit(self.widget_7)
        self.lineEdit_productname.setGeometry(QtCore.QRect(260, 120, 125, 25))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        font.setBold(False)
        font.setWeight(50)
        self.lineEdit_productname.setFont(font)
        self.lineEdit_productname.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEdit_productname.setObjectName("lineEdit_productname")
        self.lineEdit_productdesc = QtWidgets.QLineEdit(self.widget_7)
        self.lineEdit_productdesc.setGeometry(QtCore.QRect(260, 150, 125, 25))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        font.setBold(False)
        font.setWeight(50)
        self.lineEdit_productdesc.setFont(font)
        self.lineEdit_productdesc.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEdit_productdesc.setObjectName("lineEdit_productdesc")
        self.lineEdit_productprice = QtWidgets.QLineEdit(self.widget_7)
        self.lineEdit_productprice.setGeometry(QtCore.QRect(260, 180, 125, 25))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        font.setBold(False)
        font.setWeight(50)
        self.lineEdit_productprice.setFont(font)
        self.lineEdit_productprice.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEdit_productprice.setObjectName("lineEdit_productprice")
        self.lineEdit_productweight = QtWidgets.QLineEdit(self.widget_7)
        self.lineEdit_productweight.setGeometry(QtCore.QRect(260, 210, 125, 25))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        font.setBold(False)
        font.setWeight(50)
        self.lineEdit_productweight.setFont(font)
        self.lineEdit_productweight.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEdit_productweight.setObjectName("lineEdit_productweight")
        self.lineEdit_productqty = QtWidgets.QLineEdit(self.widget_7)
        self.lineEdit_productqty.setGeometry(QtCore.QRect(260, 240, 125, 25))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        font.setBold(False)
        font.setWeight(50)
        self.lineEdit_productqty.setFont(font)
        self.lineEdit_productqty.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEdit_productqty.setObjectName("lineEdit_productqty")
        self.pushButton_prod_add = QtWidgets.QPushButton(self.widget_7)
        self.pushButton_prod_add.setGeometry(QtCore.QRect(60, 310, 50, 35))
        self.pushButton_prod_add.setStyleSheet("image: url(:/newPrefix/add.png);")
        self.pushButton_prod_add.setText("")
        self.pushButton_prod_add.setObjectName("pushButton_prod_add")
        self.pushButton_pro_update = QtWidgets.QPushButton(self.widget_7)
        self.pushButton_pro_update.setGeometry(QtCore.QRect(160, 310, 50, 35))
        self.pushButton_pro_update.setStyleSheet("image: url(:/newPrefix/update.png);")
        self.pushButton_pro_update.setText("")
        self.pushButton_pro_update.setObjectName("pushButton_pro_update")
        self.pushButton_pro_delete = QtWidgets.QPushButton(self.widget_7)
        self.pushButton_pro_delete.setGeometry(QtCore.QRect(260, 310, 50, 35))
        self.pushButton_pro_delete.setStyleSheet("image: url(:/newPrefix/delete.png);")
        self.pushButton_pro_delete.setText("")
        self.pushButton_pro_delete.setObjectName("pushButton_pro_delete")
        self.pushButton_pro_clear = QtWidgets.QPushButton(self.widget_7)
        self.pushButton_pro_clear.setGeometry(QtCore.QRect(360, 310, 50, 35))
        self.pushButton_pro_clear.setStyleSheet("image: url(:/newPrefix/clears.png);")
        self.pushButton_pro_clear.setText("")
        self.pushButton_pro_clear.setObjectName("pushButton_pro_clear")
        self.comboBox = QtWidgets.QComboBox(self.widget_7)
        self.comboBox.setGeometry(QtCore.QRect(260, 60, 125, 25))
        self.comboBox.setObjectName("comboBox")
        self.lineEdit_products = QtWidgets.QLineEdit(self.page_7)
        self.lineEdit_products.setEnabled(False)
        self.lineEdit_products.setGeometry(QtCore.QRect(550, 30, 113, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(16)
        font.setBold(True)
        font.setItalic(True)
        font.setWeight(75)
        self.lineEdit_products.setFont(font)
        self.lineEdit_products.setStyleSheet(
            "background:qlineargradient(spread:pad, x1:0.912045, y1:0.932, x2:0.898, y2:0.164545, stop:0 rgba(255, 0, 0, 255), stop:1 rgba(255, 255, 255, 255))")
        self.lineEdit_products.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEdit_products.setReadOnly(True)
        self.lineEdit_products.setObjectName("lineEdit_products")
        self.toolButton_products = QtWidgets.QToolButton(self.page_7)
        self.toolButton_products.setGeometry(QtCore.QRect(300, 90, 50, 40))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.toolButton_products.setFont(font)
        self.toolButton_products.setStyleSheet("background:rgb(204, 204, 204)")
        self.toolButton_products.setText("")
        self.toolButton_products.setArrowType(QtCore.Qt.LeftArrow)
        self.toolButton_products.setObjectName("toolButton_products")
        self.stackedWidget.addWidget(self.page_7)
        self.page_8 = QtWidgets.QWidget()
        self.page_8.setEnabled(True)
        self.page_8.setObjectName("page_8")
        self.frame_12 = QtWidgets.QFrame(self.page_8)
        self.frame_12.setGeometry(QtCore.QRect(0, 60, 161, 81))
        self.frame_12.setStyleSheet("image: url(:/newPrefix/logo.jpg);")
        self.frame_12.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_12.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_12.setObjectName("frame_12")
        self.widget_8 = QtWidgets.QWidget(self.page_8)
        self.widget_8.setGeometry(QtCore.QRect(140, 160, 501, 371))
        self.widget_8.setStyleSheet("background-color: rgb(225, 251, 230);")
        self.widget_8.setObjectName("widget_8")
        self.label_17 = QtWidgets.QLabel(self.widget_8)
        self.label_17.setGeometry(QtCore.QRect(40, 20, 70, 20))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.label_17.setFont(font)
        self.label_17.setAlignment(QtCore.Qt.AlignCenter)
        self.label_17.setObjectName("label_17")
        self.label_18 = QtWidgets.QLabel(self.widget_8)
        self.label_18.setGeometry(QtCore.QRect(150, 20, 85, 20))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_18.setFont(font)
        self.label_18.setObjectName("label_18")
        self.label_19 = QtWidgets.QLabel(self.widget_8)
        self.label_19.setGeometry(QtCore.QRect(270, 20, 70, 20))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_19.setFont(font)
        self.label_19.setAlignment(QtCore.Qt.AlignCenter)
        self.label_19.setObjectName("label_19")
        self.label_20 = QtWidgets.QLabel(self.widget_8)
        self.label_20.setGeometry(QtCore.QRect(390, 20, 70, 20))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_20.setFont(font)
        self.label_20.setAlignment(QtCore.Qt.AlignCenter)
        self.label_20.setObjectName("label_20")
        self.lineEdit_purchaseid = QtWidgets.QLineEdit(self.widget_8)
        self.lineEdit_purchaseid.setGeometry(QtCore.QRect(10, 50, 110, 25))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        font.setBold(False)
        font.setWeight(50)
        self.lineEdit_purchaseid.setFont(font)
        self.lineEdit_purchaseid.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEdit_purchaseid.setObjectName("lineEdit_purchaseid")
        self.lineEdit_purchasename = QtWidgets.QLineEdit(self.widget_8)
        self.lineEdit_purchasename.setGeometry(QtCore.QRect(140, 50, 110, 25))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        font.setBold(False)
        font.setWeight(50)
        self.lineEdit_purchasename.setFont(font)
        self.lineEdit_purchasename.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEdit_purchasename.setObjectName("lineEdit_purchasename")
        self.lineEdit_purchaseprice = QtWidgets.QLineEdit(self.widget_8)
        self.lineEdit_purchaseprice.setGeometry(QtCore.QRect(260, 50, 110, 25))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        font.setBold(False)
        font.setWeight(50)
        self.lineEdit_purchaseprice.setFont(font)
        self.lineEdit_purchaseprice.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEdit_purchaseprice.setObjectName("lineEdit_purchaseprice")
        self.lineEdit_purchaseqty = QtWidgets.QLineEdit(self.widget_8)
        self.lineEdit_purchaseqty.setGeometry(QtCore.QRect(380, 50, 110, 25))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        font.setBold(False)
        font.setWeight(50)
        self.lineEdit_purchaseqty.setFont(font)
        self.lineEdit_purchaseqty.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEdit_purchaseqty.setObjectName("lineEdit_purchaseqty")
        self.pushButton_pur_add = QtWidgets.QPushButton(self.widget_8)
        self.pushButton_pur_add.setGeometry(QtCore.QRect(20, 100, 50, 35))
        self.pushButton_pur_add.setStyleSheet("image: url(:/newPrefix/add.png);")
        self.pushButton_pur_add.setText("")
        self.pushButton_pur_add.setObjectName("pushButton_pur_add")
        self.pushButton_pur_update = QtWidgets.QPushButton(self.widget_8)
        self.pushButton_pur_update.setGeometry(QtCore.QRect(100, 100, 50, 35))
        self.pushButton_pur_update.setStyleSheet("image: url(:/newPrefix/update.png);")
        self.pushButton_pur_update.setText("")
        self.pushButton_pur_update.setObjectName("pushButton_pur_update")
        self.pushButton_pur_clear = QtWidgets.QPushButton(self.widget_8)
        self.pushButton_pur_clear.setGeometry(QtCore.QRect(180, 100, 50, 35))
        self.pushButton_pur_clear.setStyleSheet("image: url(:/newPrefix/clears.png);")
        self.pushButton_pur_clear.setText("")
        self.pushButton_pur_clear.setObjectName("pushButton_pur_clear")
        self.label_21 = QtWidgets.QLabel(self.widget_8)
        self.label_21.setGeometry(QtCore.QRect(260, 100, 70, 35))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_21.setFont(font)
        self.label_21.setObjectName("label_21")
        self.lineEdit_purchasetotal = QtWidgets.QLineEdit(self.widget_8)
        self.lineEdit_purchasetotal.setGeometry(QtCore.QRect(340, 100, 113, 35))
        self.lineEdit_purchasetotal.setObjectName("lineEdit_purchasetotal")
        self.tableWidget_purchase = QtWidgets.QTableWidget(self.widget_8)
        self.tableWidget_purchase.setGeometry(QtCore.QRect(0, 150, 490, 200))
        self.tableWidget_purchase.setObjectName("tableWidget_purchase")
        self.tableWidget_purchase.setColumnCount(5)
        self.tableWidget_purchase.setRowCount(5)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_purchase.setVerticalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_purchase.setVerticalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_purchase.setVerticalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_purchase.setVerticalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_purchase.setVerticalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_purchase.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_purchase.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_purchase.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_purchase.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_purchase.setHorizontalHeaderItem(4, item)
        self.lineEdit_purchase = QtWidgets.QLineEdit(self.page_8)
        self.lineEdit_purchase.setEnabled(False)
        self.lineEdit_purchase.setGeometry(QtCore.QRect(550, 0, 113, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(16)
        font.setBold(True)
        font.setItalic(True)
        font.setWeight(75)
        self.lineEdit_purchase.setFont(font)
        self.lineEdit_purchase.setStyleSheet(
            "background:qlineargradient(spread:pad, x1:0.912045, y1:0.932, x2:0.898, y2:0.164545, stop:0 rgba(255, 0, 0, 255), stop:1 rgba(255, 255, 255, 255))")
        self.lineEdit_purchase.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEdit_purchase.setObjectName("lineEdit_purchase")
        self.toolButton_purchase = QtWidgets.QToolButton(self.page_8)
        self.toolButton_purchase.setGeometry(QtCore.QRect(300, 90, 50, 40))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.toolButton_purchase.setFont(font)
        self.toolButton_purchase.setStyleSheet("background:rgb(204, 204, 204)")
        self.toolButton_purchase.setText("")
        self.toolButton_purchase.setArrowType(QtCore.Qt.LeftArrow)
        self.toolButton_purchase.setObjectName("toolButton_purchase")
        self.widget_9 = QtWidgets.QWidget(self.page_8)
        self.widget_9.setGeometry(QtCore.QRect(389, 50, 301, 101))
        self.widget_9.setObjectName("widget_9")
        self.label_22 = QtWidgets.QLabel(self.widget_9)
        self.label_22.setGeometry(QtCore.QRect(80, 10, 151, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_22.setFont(font)
        self.label_22.setStyleSheet(
            "background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:0.0681818, y2:0.0625, stop:0 rgba(0, 0, 0, 255), stop:1 rgba(255, 255, 255, 255));\n"
            "color: qradialgradient(spread:repeat, cx:0.5, cy:0.5, radius:0.077, fx:0.5, fy:0.5, stop:0 rgba(255, 0, 0, 255), stop:0.948864 rgba(0, 85, 255, 192), stop:1 rgba(0, 169, 255, 147));")
        self.label_22.setAlignment(QtCore.Qt.AlignCenter)
        self.label_22.setObjectName("label_22")
        self.label_23 = QtWidgets.QLabel(self.widget_9)
        self.label_23.setGeometry(QtCore.QRect(20, 60, 61, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.label_23.setFont(font)
        self.label_23.setStyleSheet(
            "background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:0.0681818, y2:0.0625, stop:0 rgba(0, 0, 0, 255), stop:1 rgba(255, 255, 255, 255));\n"
            "color:qradialgradient(spread:repeat, cx:0.5, cy:0.5, radius:0.077, fx:0.5, fy:0.5, stop:0 rgba(255, 0, 0, 255), stop:0.948864 rgba(0, 85, 255, 192), stop:1 rgba(0, 169, 255, 147))")
        self.label_23.setAlignment(QtCore.Qt.AlignCenter)
        self.label_23.setObjectName("label_23")
        self.dateEdit_2 = QtWidgets.QDateEdit(self.widget_9)
        self.dateEdit_2.setDateTime(QtCore.QDateTime.currentDateTime())
        self.dateEdit_2.setGeometry(QtCore.QRect(140, 60, 121, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.dateEdit_2.setFont(font)
        self.dateEdit_2.setStyleSheet(
            "color: qradialgradient(spread:repeat, cx:0.5, cy:0.5, radius:0.077, fx:0.5, fy:0.5, stop:0 rgba(255, 0, 0, 255), stop:0.948864 rgba(0, 85, 255, 192), stop:1 rgba(0, 169, 255, 147));")
        self.dateEdit_2.setCalendarPopup(True)
        self.dateEdit_2.setObjectName("dateEdit_2")
        self.stackedWidget.addWidget(self.page_8)
        self.page_9 = QtWidgets.QWidget()
        self.page_9.setEnabled(True)
        self.page_9.setObjectName("page_9")
        self.frame_13 = QtWidgets.QFrame(self.page_9)
        self.frame_13.setGeometry(QtCore.QRect(0, 60, 161, 81))
        self.frame_13.setStyleSheet("image:url(:/newPrefix/logo.jpg)")
        self.frame_13.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_13.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_13.setObjectName("frame_13")
        self.widget_10 = QtWidgets.QWidget(self.page_9)
        self.widget_10.setGeometry(QtCore.QRect(140, 160, 501, 371))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        font.setBold(True)
        font.setItalic(True)
        font.setWeight(75)
        self.widget_10.setFont(font)
        self.widget_10.setStyleSheet("background-color: rgb(225, 251, 230);")
        self.widget_10.setObjectName("widget_10")
        self.label_24 = QtWidgets.QLabel(self.widget_10)
        self.label_24.setGeometry(QtCore.QRect(40, 20, 70, 20))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(11)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.label_24.setFont(font)
        self.label_24.setAlignment(QtCore.Qt.AlignCenter)
        self.label_24.setObjectName("label_24")
        self.label_25 = QtWidgets.QLabel(self.widget_10)
        self.label_25.setGeometry(QtCore.QRect(150, 20, 85, 20))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(10)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.label_25.setFont(font)
        self.label_25.setAlignment(QtCore.Qt.AlignCenter)
        self.label_25.setObjectName("label_25")
        self.label_26 = QtWidgets.QLabel(self.widget_10)
        self.label_26.setGeometry(QtCore.QRect(260, 20, 77, 20))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(11)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.label_26.setFont(font)
        self.label_26.setAlignment(QtCore.Qt.AlignCenter)
        self.label_26.setObjectName("label_26")
        self.label_27 = QtWidgets.QLabel(self.widget_10)
        self.label_27.setGeometry(QtCore.QRect(390, 20, 70, 20))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(11)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.label_27.setFont(font)
        self.label_27.setAlignment(QtCore.Qt.AlignCenter)
        self.label_27.setObjectName("label_27")
        self.lineEdit_salesid = QtWidgets.QLineEdit(self.widget_10)
        self.lineEdit_salesid.setGeometry(QtCore.QRect(10, 50, 110, 25))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.lineEdit_salesid.setFont(font)
        self.lineEdit_salesid.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEdit_salesid.setObjectName("lineEdit_salesid")
        self.lineEdit_salesname = QtWidgets.QLineEdit(self.widget_10)
        self.lineEdit_salesname.setGeometry(QtCore.QRect(130, 50, 110, 25))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.lineEdit_salesname.setFont(font)
        self.lineEdit_salesname.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEdit_salesname.setObjectName("lineEdit_salesname")
        self.lineEdit_salesprice = QtWidgets.QLineEdit(self.widget_10)
        self.lineEdit_salesprice.setGeometry(QtCore.QRect(250, 50, 110, 25))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.lineEdit_salesprice.setFont(font)
        self.lineEdit_salesprice.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEdit_salesprice.setObjectName("lineEdit_salesprice")
        self.lineEdit_salesqty = QtWidgets.QLineEdit(self.widget_10)
        self.lineEdit_salesqty.setGeometry(QtCore.QRect(370, 50, 110, 25))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.lineEdit_salesqty.setFont(font)
        self.lineEdit_salesqty.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEdit_salesqty.setObjectName("lineEdit_salesqty")
        self.pushButton_sales_add = QtWidgets.QPushButton(self.widget_10)
        self.pushButton_sales_add.setEnabled(False)
        self.pushButton_sales_add.setGeometry(QtCore.QRect(20, 100, 40, 30))
        self.pushButton_sales_add.setStyleSheet("image:url(:/newPrefix/add.png)")
        self.pushButton_sales_add.setText("")
        self.pushButton_sales_add.setObjectName("pushButton_sales_add")
        self.pushButton_sales_update = QtWidgets.QPushButton(self.widget_10)
        self.pushButton_sales_update.setGeometry(QtCore.QRect(80, 100, 40, 30))
        self.pushButton_sales_update.setStyleSheet("image: url(:/newPrefix/update.png);")
        self.pushButton_sales_update.setText("")
        self.pushButton_sales_update.setObjectName("pushButton_sales_update")
        self.pushButton_sales_print = QtWidgets.QPushButton(self.widget_10)
        self.pushButton_sales_print.setGeometry(QtCore.QRect(140, 100, 40, 30))
        self.pushButton_sales_print.setAccessibleName("")
        self.pushButton_sales_print.setStyleSheet("image: url(:/newPrefix/print.png);")
        self.pushButton_sales_print.setText("")
        self.pushButton_sales_print.setCheckable(False)
        self.pushButton_sales_print.setObjectName("pushButton_sales_print")
        self.pushButton_sales_clear = QtWidgets.QPushButton(self.widget_10)
        self.pushButton_sales_clear.setGeometry(QtCore.QRect(200, 100, 40, 30))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.pushButton_sales_clear.setFont(font)
        self.pushButton_sales_clear.setStyleSheet("image: url(:/newPrefix/clears.png);")
        self.pushButton_sales_clear.setText("")
        self.pushButton_sales_clear.setObjectName("pushButton_sales_clear")
        self.lineEdit_salestotal = QtWidgets.QLineEdit(self.widget_10)
        self.lineEdit_salestotal.setGeometry(QtCore.QRect(370, 110, 110, 20))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.lineEdit_salestotal.setFont(font)
        self.lineEdit_salestotal.setObjectName("lineEdit_salestotal")
        self.label_28 = QtWidgets.QLabel(self.widget_10)
        self.label_28.setGeometry(QtCore.QRect(270, 110, 47, 21))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.label_28.setFont(font)
        self.label_28.setObjectName("label_28")
        self.tableWidget_sales = QtWidgets.QTableWidget(self.widget_10)
        self.tableWidget_sales.setGeometry(QtCore.QRect(0, 150, 490, 200))
        self.tableWidget_sales.setObjectName("tableWidget_sales")
        self.tableWidget_sales.setColumnCount(5)
        self.tableWidget_sales.setRowCount(5)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_sales.setVerticalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_sales.setVerticalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_sales.setVerticalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_sales.setVerticalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_sales.setVerticalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_sales.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_sales.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_sales.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_sales.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_sales.setHorizontalHeaderItem(4, item)
        self.lineEdit_salesorder = QtWidgets.QLineEdit(self.page_9)
        self.lineEdit_salesorder.setEnabled(False)
        self.lineEdit_salesorder.setGeometry(QtCore.QRect(550, 0, 113, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        font.setBold(True)
        font.setItalic(True)
        font.setWeight(75)
        self.lineEdit_salesorder.setFont(font)
        self.lineEdit_salesorder.setStyleSheet(
            "background-color: qlineargradient(spread:pad, x1:0.912045, y1:0.932, x2:0.898, y2:0.164545, stop:0 rgba(255, 0, 0, 255), stop:1 rgba(255, 255, 255, 255));")
        self.lineEdit_salesorder.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEdit_salesorder.setObjectName("lineEdit_salesorder")
        self.toolButton_salesorder = QtWidgets.QToolButton(self.page_9)
        self.toolButton_salesorder.setGeometry(QtCore.QRect(300, 90, 50, 40))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.toolButton_salesorder.setFont(font)
        self.toolButton_salesorder.setStyleSheet("background:rgb(204, 204, 204)")
        self.toolButton_salesorder.setText("")
        self.toolButton_salesorder.setArrowType(QtCore.Qt.LeftArrow)
        self.toolButton_salesorder.setObjectName("toolButton_salesorder")
        self.widget_11 = QtWidgets.QWidget(self.page_9)
        self.widget_11.setGeometry(QtCore.QRect(389, 50, 301, 101))
        self.widget_11.setObjectName("widget_11")
        self.label_29 = QtWidgets.QLabel(self.widget_11)
        self.label_29.setGeometry(QtCore.QRect(100, 10, 100, 20))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(10)
        font.setBold(True)
        font.setItalic(True)
        font.setWeight(75)
        self.label_29.setFont(font)
        self.label_29.setStyleSheet(
            "background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:0.0681818, y2:0.0625, stop:0 rgba(0, 0, 0, 255), stop:1 rgba(255, 255, 255, 255));")
        self.label_29.setAlignment(QtCore.Qt.AlignCenter)
        self.label_29.setObjectName("label_29")
        self.label_30 = QtWidgets.QLabel(self.widget_11)
        self.label_30.setGeometry(QtCore.QRect(40, 40, 65, 20))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(9)
        font.setBold(False)
        font.setWeight(50)
        self.label_30.setFont(font)
        self.label_30.setStyleSheet(
            "background:qlineargradient(spread:pad, x1:0, y1:0, x2:0.0681818, y2:0.0625, stop:0 rgba(0, 0, 0, 255), stop:1 rgba(255, 255, 255, 255))")
        self.label_30.setAlignment(QtCore.Qt.AlignCenter)
        self.label_30.setObjectName("label_30")
        self.label_31 = QtWidgets.QLabel(self.widget_11)
        self.label_31.setGeometry(QtCore.QRect(40, 70, 65, 20))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(9)
        font.setBold(False)
        font.setWeight(50)
        self.label_31.setFont(font)
        self.label_31.setStyleSheet(
            "background:qlineargradient(spread:pad, x1:0, y1:0, x2:0.0681818, y2:0.0625, stop:0 rgba(0, 0, 0, 255), stop:1 rgba(255, 255, 255, 255))")
        self.label_31.setAlignment(QtCore.Qt.AlignCenter)
        self.label_31.setObjectName("label_31")
        self.lineEdit_salesno_2 = QtWidgets.QLineEdit(self.widget_11)
        self.lineEdit_salesno_2.setGeometry(QtCore.QRect(170, 40, 113, 20))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(11)
        font.setBold(False)
        font.setWeight(50)
        self.lineEdit_salesno_2.setFont(font)
        self.lineEdit_salesno_2.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEdit_salesno_2.setObjectName("lineEdit_salesno_2")
        self.dateEdit_3 = QtWidgets.QDateEdit(self.widget_11)
        self.dateEdit_3.setDateTime(QtCore.QDateTime.currentDateTime())
        self.dateEdit_3.setGeometry(QtCore.QRect(170, 70, 113, 22))
        self.dateEdit_3.setAlignment(QtCore.Qt.AlignCenter)
        self.dateEdit_3.setCalendarPopup(True)
        self.dateEdit_3.setObjectName("dateEdit_3")
        self.pushButton_sales_wid_add = QtWidgets.QPushButton(self.widget_11)
        self.pushButton_sales_wid_add.setGeometry(QtCore.QRect(230, 10, 31, 23))
        self.pushButton_sales_wid_add.setStyleSheet("background-color: rgb(225, 251, 230);\n"
                                                    "image: url(:/newPrefix/add.png);")
        self.pushButton_sales_wid_add.setText("")
        self.pushButton_sales_wid_add.setObjectName("pushButton_sales_wid_add")
        self.stackedWidget.addWidget(self.page_9)
        Swaad.setCentralWidget(self.centralwidget)

        self.retranslateUi(Swaad)
        self.stackedWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(Swaad)

    def retranslateUi(self, Swaad):
        _translate = QtCore.QCoreApplication.translate
        Swaad.setWindowTitle(_translate("Swaad", "SWAAD BAKERS"))
        self.label.setText(_translate("Swaad", "LOGIN"))
        self.lineEdit_loginuser.setPlaceholderText(_translate("Swaad", "Username"))
        self.lineEdit_loginpass.setPlaceholderText(_translate("Swaad", "Password"))
        self.pushButton_login.setText(_translate("Swaad", "LOGIN"))
        self.label_2.setText(_translate("Swaad", "SIGN UP"))
        self.lineEdit_signuser.setPlaceholderText(_translate("Swaad", "Enter username"))
        self.lineEdit_signpass.setPlaceholderText(_translate("Swaad", "Enter password"))
        self.pushButton_signin.setText(_translate("Swaad", "SIGN IN"))
        self.pushButton_delete.setText(_translate("Swaad", "DELETE"))
        self.pushButton_admin_category.setText(_translate("Swaad", "CATEGORY"))
        self.pushButton_admin_products.setText(_translate("Swaad", "PRODUCTS"))
        self.pushButton_admin_purchase.setText(_translate("Swaad", "PURCHASE ORDER"))
        self.pushButton_admin_order.setText(_translate("Swaad", "SALES ORDER"))
        self.pushButton_admin_report.setText(_translate("Swaad", "SALES REPORT"))
        self.pushButton_createuser.setText(_translate("Swaad", "CREATE USER"))
        self.pushButton_admin_logout.setText(_translate("Swaad", "LOGOUT"))
        self.lineEdit_admin.setText(_translate("Swaad", "ADMIN"))
        self.pushButton_user_category.setText(_translate("Swaad", "CATEGORY"))
        self.pushButton_user_products.setText(_translate("Swaad", "PRODUCTS"))
        self.pushButton_user_purchase.setText(_translate("Swaad", "PURCHASE ORDER"))
        self.pushButton_user_order.setText(_translate("Swaad", "SALES ORDER"))
        self.pushButton_user_report.setText(_translate("Swaad", "SALES REPORT"))
        self.pushButton_userlogout.setText(_translate("Swaad", "LOGOUT"))
        self.lineEdit_user.setText(_translate("Swaad", "USER"))
        self.label_3.setText(_translate("Swaad", "SALES REPORT"))
        self.label_4.setText(_translate("Swaad", "TO"))
        self.label_5.setText(_translate("Swaad", "FROM"))
        self.pushButton_profit_report.setText(_translate("Swaad", "Profit Report"))
        self.pushButton_sales_report.setText(_translate("Swaad", "Sales Report"))
        self.lineEdit_salesreport.setText(_translate("Swaad", "USER"))
        self.toolButton_salesreport.setText(_translate("Swaad", "..."))
        self.label_6.setText(_translate("Swaad", "CATEGORY"))
        self.label_7.setText(_translate("Swaad", "CATEGORY ID"))
        self.label_8.setText(_translate("Swaad", "CATEGORY NAME"))
        self.lineEdit_catid.setPlaceholderText(_translate("Swaad", "id"))
        self.lineEdit_catname.setPlaceholderText(_translate("Swaad", "name"))
        self.toolButton_category.setText(_translate("Swaad", "..."))
        self.lineEdit_category.setText(_translate("Swaad", "USER"))
        self.label_9.setText(_translate("Swaad", "PRODUCTS"))
        self.label_10.setText(_translate("Swaad", "Category Name"))
        self.label_11.setText(_translate("Swaad", "Product id"))
        self.label_12.setText(_translate("Swaad", "Product Name"))
        self.label_13.setText(_translate("Swaad", "Description"))
        self.label_14.setText(_translate("Swaad", "Price"))
        self.label_15.setText(_translate("Swaad", "Weight"))
        self.label_16.setText(_translate("Swaad", "Quantity"))
        self.lineEdit_productid.setPlaceholderText(_translate("Swaad", "id"))
        self.lineEdit_productname.setPlaceholderText(_translate("Swaad", "name"))
        self.lineEdit_productdesc.setPlaceholderText(_translate("Swaad", "description"))
        self.lineEdit_productprice.setPlaceholderText(_translate("Swaad", "price"))
        self.lineEdit_productweight.setPlaceholderText(_translate("Swaad", "weights"))
        self.lineEdit_productqty.setPlaceholderText(_translate("Swaad", "qty"))
        self.lineEdit_products.setText(_translate("Swaad", "USER"))
        self.label_17.setText(_translate("Swaad", "Product id"))
        self.label_18.setText(_translate("Swaad", "Product Name"))
        self.label_19.setText(_translate("Swaad", "Price"))
        self.label_20.setText(_translate("Swaad", "Quantity"))
        self.lineEdit_purchaseid.setPlaceholderText(_translate("Swaad", "id"))
        self.lineEdit_purchasename.setPlaceholderText(_translate("Swaad", "name"))
        self.lineEdit_purchaseprice.setPlaceholderText(_translate("Swaad", "price"))
        self.lineEdit_purchaseqty.setPlaceholderText(_translate("Swaad", "qty"))
        self.pushButton_pur_add.setShortcut(_translate("Swaad", "Return"))
        self.pushButton_pur_update.setShortcut(_translate("Swaad", "Ctrl+R"))
        self.pushButton_pur_clear.setShortcut(_translate("Swaad", "Del"))
        self.label_21.setText(_translate("Swaad", "Total"))
        item = self.tableWidget_purchase.verticalHeaderItem(0)
        item.setText(_translate("Swaad", "1"))
        item = self.tableWidget_purchase.verticalHeaderItem(1)
        item.setText(_translate("Swaad", "2"))
        item = self.tableWidget_purchase.verticalHeaderItem(2)
        item.setText(_translate("Swaad", "3"))
        item = self.tableWidget_purchase.verticalHeaderItem(3)
        item.setText(_translate("Swaad", "4"))
        item = self.tableWidget_purchase.verticalHeaderItem(4)
        item.setText(_translate("Swaad", "5"))
        item = self.tableWidget_purchase.horizontalHeaderItem(0)
        item.setText(_translate("Swaad", "Product id"))
        item = self.tableWidget_purchase.horizontalHeaderItem(1)
        item.setText(_translate("Swaad", "Product Name"))
        item = self.tableWidget_purchase.horizontalHeaderItem(2)
        item.setText(_translate("Swaad", "Price"))
        item = self.tableWidget_purchase.horizontalHeaderItem(3)
        item.setText(_translate("Swaad", "Quantity"))
        item = self.tableWidget_purchase.horizontalHeaderItem(4)
        item.setText(_translate("Swaad", "Total"))
        self.lineEdit_purchase.setText(_translate("Swaad", "USER"))
        self.label_22.setText(_translate("Swaad", "PURCHASE ORDER"))
        self.label_23.setText(_translate("Swaad", "DATE"))
        self.label_24.setText(_translate("Swaad", "Product id"))
        self.label_25.setText(_translate("Swaad", "Product Name"))
        self.label_26.setText(_translate("Swaad", "Price"))
        self.label_27.setText(_translate("Swaad", "Quantity"))
        self.lineEdit_salesid.setPlaceholderText(_translate("Swaad", "id"))
        self.lineEdit_salesname.setPlaceholderText(_translate("Swaad", "name"))
        self.lineEdit_salesprice.setPlaceholderText(_translate("Swaad", "price"))
        self.lineEdit_salesqty.setPlaceholderText(_translate("Swaad", "quantity"))
        self.pushButton_sales_add.setShortcut(_translate("Swaad", "Return"))
        self.pushButton_sales_print.setShortcut(_translate("Swaad", "Ctrl+P"))
        self.pushButton_sales_clear.setShortcut(_translate("Swaad", "Del"))
        self.label_28.setText(_translate("Swaad", "Total"))
        item = self.tableWidget_sales.verticalHeaderItem(0)
        item.setText(_translate("Swaad", "1"))
        item = self.tableWidget_sales.verticalHeaderItem(1)
        item.setText(_translate("Swaad", "2"))
        item = self.tableWidget_sales.verticalHeaderItem(2)
        item.setText(_translate("Swaad", "3"))
        item = self.tableWidget_sales.verticalHeaderItem(3)
        item.setText(_translate("Swaad", "4"))
        item = self.tableWidget_sales.verticalHeaderItem(4)
        item.setText(_translate("Swaad", "5"))
        item = self.tableWidget_sales.horizontalHeaderItem(0)
        item.setText(_translate("Swaad", "Product id"))
        item = self.tableWidget_sales.horizontalHeaderItem(1)
        item.setText(_translate("Swaad", "Product Name"))
        item = self.tableWidget_sales.horizontalHeaderItem(2)
        item.setText(_translate("Swaad", "Quantity"))
        item = self.tableWidget_sales.horizontalHeaderItem(3)
        item.setText(_translate("Swaad", "Price"))
        item = self.tableWidget_sales.horizontalHeaderItem(4)
        item.setText(_translate("Swaad", "Total"))
        self.lineEdit_salesorder.setText(_translate("Swaad", "USER"))
        self.label_29.setText(_translate("Swaad", "SALES ORDER"))
        self.label_30.setText(_translate("Swaad", "SALES No."))
        self.label_31.setText(_translate("Swaad", "DATE"))
        self.lineEdit_salesno_2.setText(_translate("Swaad", "1"))

        self.pushButton_login.clicked.connect(self.login)
        self.pushButton_user_order.clicked.connect(self.ushiftord)
        self.pushButton_admin_order.clicked.connect(self.ashiftord)
        self.pushButton_admin_products.clicked.connect(self.combox)
        self.pushButton_user_products.clicked.connect(self.combox)
        self.pushButton_admin_products.clicked.connect(self.prgetpid)
        self.pushButton_user_products.clicked.connect(self.prgetpid)
        self.pushButton_admin_products.clicked.connect(self.ashiftpro)
        self.pushButton_user_products.clicked.connect(self.ushiftpro)
        self.toolButton_purchase.clicked.connect(self.backpage)
        self.toolButton_salesorder.clicked.connect(self.backpage)
        self.toolButton_products.clicked.connect(self.backpage)
        self.toolButton_category.clicked.connect(self.backpage)
        self.toolButton_salesreport.clicked.connect(self.backpage)
        self.pushButton_admin_category.clicked.connect(self.ashiftcat)
        self.pushButton_user_category.clicked.connect(self.ushiftcat)
        self.pushButton_admin_report.clicked.connect(self.ashiftreports)
        self.pushButton_user_report.clicked.connect(self.ushiftreports)
        self.pushButton_createuser.clicked.connect(lambda: self.stackedWidget.setCurrentIndex(1))
        self.pushButton_user_purchase.clicked.connect(self.ushiftpur)
        self.pushButton_admin_purchase.clicked.connect(self.ashiftpur)
        self.pushButton_userlogout.clicked.connect(self.logoutt)
        self.pushButton_admin_logout.clicked.connect(self.logoutt)
        self.pushButton_cat_clear.clicked.connect(self.clearcat)
        self.pushButton_signin.clicked.connect(self.signup)
        self.pushButton_delete.clicked.connect(self.delup)
        self.pushButton_pro_clear.clicked.connect(self.clearpr)
        self.pushButton_cat_add.clicked.connect(self.addcat)
        self.pushButton_cat_delete.clicked.connect(self.delcat)
        self.pushButton_prod_add.clicked.connect(self.addpr)
        self.pushButton_pro_delete.clicked.connect(self.delpr)
        self.pushButton_sales_add.clicked.connect(self.taketable)
        self.pushButton_sales_update.clicked.connect(self.addmore)
        self.pushButton_sales_update.clicked.connect(self.loaddata)
        self.pushButton_sales_print.clicked.connect(self.sales)
        self.pushButton_sales_print.clicked.connect(self.cleartable)
        self.pushButton_admin_order.clicked.connect(self.billload)
        self.pushButton_user_order.clicked.connect(self.billload)
        self.pushButton_admin_order.clicked.connect(self.pdfpos)
        self.pushButton_admin_order.clicked.connect(self.pgetpid)
        self.pushButton_user_order.clicked.connect(self.pdfpos)
        self.pushButton_sales_print.clicked.connect(self.pdfpos)
        self.pushButton_user_order.clicked.connect(self.pgetpid)
        self.pushButton_sales_print.clicked.connect(self.pgetpid)
        self.pushButton_profit_report.clicked.connect(self.prreportgenerate)
        self.pushButton_sales_report.clicked.connect(self.reportgenerate)
        self.pushButton_prod_add.clicked.connect(self.prgetpid)
        self.pushButton_pro_delete.clicked.connect(self.prgetpid)
        self.pushButton_pro_update.clicked.connect(self.updatepr)
        self.pushButton_user_purchase.clicked.connect(self.purpid)
        self.pushButton_admin_purchase.clicked.connect(self.purpid)
        self.pushButton_pur_update.clicked.connect(self.addmorepur)
        self.pushButton_pur_update.clicked.connect(self.loadpurdata)
        self.pushButton_pur_add.clicked.connect(self.takepurtable)
        self.pushButton_pur_clear.clicked.connect(self.savepur)
        self.pushButton_sales_wid_add.clicked.connect(self.saleperpr)
        self.pushButton_sales_wid_add.clicked.connect(self.gettotal)
        self.pushButton_sales_clear.clicked.connect(self.deletecome)
        self.pushButton_admin_category.clicked.connect(self.cate)
        self.pushButton_user_category.clicked.connect(self.cate)

    def cate(self):
        try:
            se = []
            conn = sqlite3.connect('SWAAD.db')
            cursor = conn.cursor()
            sql = ("SELECT CAT_ID FROM CATEGORY")
            cursor.execute(sql)
            b = cursor.fetchall()
            data = [datum[0] for datum in b]
            conn.commit()
            conn.close()
            completer = QCompleter(data)
            self.lineEdit_catid.setCompleter(completer)
            conn = sqlite3.connect('SWAAD.db')
            cursor = conn.cursor()
            sql = ("SELECT CAT_NAME FROM CATEGORY")
            cursor.execute(sql)
            b = cursor.fetchall()
            data = [datum[0] for datum in b]
            conn.commit()
            conn.close()
            completer = QCompleter(data)
            self.lineEdit_catname.setCompleter(completer)
        except Exception as error:
            print(error)

    def deletecome(self):
        try:
            conn = sqlite3.connect('SWAAD.db')
            cursor = conn.cursor()
            sql = ("DELETE FROM PURCHASE")
            result = cursor.execute(sql)
            sql = ("DELETE FROM DATA")
            result = cursor.execute(sql)
            conn.commit()
            conn.close()
            conn = sqlite3.connect('SWAAD.db')
            cursor = conn.cursor()
            sql = ("SELECT * FROM PURCHASE")
            result = cursor.execute(sql)
            self.tableWidget_sales.setRowCount(0)
            for row_number, row_data in enumerate(result):
                self.tableWidget_sales.insertRow(row_number)
                for column_number, data in enumerate(row_data):
                    self.tableWidget_sales.setItem(row_number, column_number,
                                                   QtWidgets.QTableWidgetItem(str(data)))


            conn.commit()
            conn.close()
            self.lineEdit_salestotal.setText("")
            self.lineEdit_salesid.setText("")
            self.lineEdit_salesname.setText("")
            self.lineEdit_salesprice.setText("")
            self.lineEdit_salesqty.setText("")

        except Exception as error:
            print(error)

    def gettotal(self):
        salesno = self.lineEdit_salesno_2.text()
        try:
            w = []
            conn = sqlite3.connect('SWAAD.db')
            cursor = conn.cursor()
            sql = ('''SELECT TOTAL FROM SALES_PR WHERE SALES_NO = ?''')
            cursor.execute(sql, (salesno,))
            b = cursor.fetchall()
            for i in range(len(b)):
                m = int(b[i][0])
                w.append(m)
            ws = sum(w)
            self.lineEdit_salestotal.setText(str(ws))
            conn.commit()
            conn.close()
        except Exception as error:
            print(error)

    def saleperpr(self):
        salesno = self.lineEdit_salesno_2.text()
        try:
            conn = sqlite3.connect('SWAAD.db')
            cursor = conn.cursor()
            sql = ('''SELECT * FROM DATA ''')
            cursor.execute(sql, )
            b = cursor.fetchall()
            conn.commit()
            conn.close()
            bb = len(b)
            # print("LENGTH",bb)
            if len(b) != 0:
                conn = sqlite3.connect('SWAAD.db')
                cursor = conn.cursor()
                sql = ('''DELETE FROM DATA ''')
                cursor.execute(sql, )
                b = cursor.fetchall()
                conn.commit()
                conn.close()
                conn = sqlite3.connect('SWAAD.db')
                cursor = conn.cursor()
                sql = ('''SELECT * FROM SALES_PR WHERE SALES_NO = ? ''')
                cursor.execute(sql, (salesno,))
                b = cursor.fetchall()
                bb = len(b)
                # print(bb)
                conn.commit()
                conn.close()
                # print(b)
                for i in range(len(b)):
                    conn = sqlite3.connect('SWAAD.db')
                    cursor = conn.cursor()
                    pid = b[i][1]
                    pname = b[i][2]
                    price = b[i][3]
                    quantity = b[i][4]
                    total = b[i][5]
                    sql = (
                        '''INSERT INTO DATA(PRODUCT_ID,PRODUCT_NAME,PRICE,QUANTITY,TOTAL) VALUES(?,?,?,?,?);''')
                    cursor.execute(sql, (pid, pname, price, quantity, total))
                    conn.commit()
                    conn.close()
            elif len(b) == 0:
                conn = sqlite3.connect('SWAAD.db')
                cursor = conn.cursor()
                sql = ('''SELECT * FROM SALES_PR WHERE SALES_NO = ? ''')
                cursor.execute(sql, (salesno,))
                b = cursor.fetchall()
                bb = len(b)
                # print(bb)
                conn.commit()
                conn.close()
                # print(b)
                for i in range(len(b)):
                    conn = sqlite3.connect('SWAAD.db')
                    cursor = conn.cursor()
                    pid = b[i][1]
                    pname = b[i][2]
                    price = b[i][3]
                    quantity = b[i][4]
                    total = b[i][5]
                    sql = (
                        '''INSERT INTO DATA(PRODUCT_ID,PRODUCT_NAME,PRICE,QUANTITY,TOTAL) VALUES(?,?,?,?,?);''')
                    cursor.execute(sql, (pid, pname, price, quantity, total))
                    conn.commit()
                    conn.close()
            else:
                msg = QMessageBox()
                msg.setText("NO PRODUCT-ID")
                msg.setIcon(QMessageBox.Critical)
                msg.setWindowTitle("SWAAD BAKERS")
                msg.exec_()
            conn = sqlite3.connect('SWAAD.db')
            cursor = conn.cursor()
            sql = ("SELECT * FROM DATA")
            result = cursor.execute(sql)
            self.tableWidget_purchase.setRowCount(0)
            for row_number, row_data in enumerate(result):
                self.tableWidget_purchase.insertRow(row_number)
                for column_number, data in enumerate(row_data):
                    self.tableWidget_purchase.setItem(row_number, column_number,
                                                   QtWidgets.QTableWidgetItem(str(data)))
            conn.commit()
            conn.close()
        except Exception as error:
            print(error)

    def billload(self):
        a = []
        conn = sqlite3.connect('SWAAD.db')
        cursor = conn.cursor()
        sql = ('''SELECT SALES_NO FROM SALES ORDER BY SALES_NO DESC ''')
        cursor.execute(sql, )

        b = cursor.fetchall()
        # print(b)
        for b in b:
            c = int(b[0])
            a.append(c)
        f = max(a)
        f = f + 1
        self.lineEdit_salesno_2.setText(str(f))

    def delup(self):
        user = self.lineEdit_signuser.text()
        try:
            if user != '':
                conn = sqlite3.connect('SWAAD.db')
                cursor = conn.cursor()
                sql = ('DELETE FROM LOGIN WHERE USER = ?')
                cursor.execute(sql, (user,))
                conn.commit()
                conn.close()
                msg = QMessageBox()
                msg.setText("USER DELETED")
                msg.setIcon(QMessageBox.Information)
                msg.setWindowTitle("SWAAD BAKERS")
                msg.exec_()
                self.lineEdit_signuser.setText("")
                self.stackedWidget.setCurrentIndex(2)
            else:
                msg = QMessageBox()
                msg.setText("USER NOT FOUND")
                msg.setIcon(QMessageBox.Critical)
                msg.setWindowTitle("SWAAD BAKERS")
                msg.exec_()
        except Exception as error:
            print(error)

    def logoutt(self):
        try:
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Information)
            msg.setText("LOGGING OUT")
            msg.setWindowTitle("SWAAD BAKERS")
            msg.exec_()
            self.stackedWidget.setCurrentIndex(0)
        except Exception as error:
            print(error)

    def signup(self):
        u2 = self.lineEdit_signuser.text()
        pass2 = self.lineEdit_signpass.text()
        try:
            if (u2 and pass2 == "") or len(u2)==0:
                msg = QMessageBox()
                msg.setIcon(QMessageBox.Critical)
                msg.setText("SOME FIELD IS MISSING")
                msg.setWindowTitle("SWAAD BAKERS")
                msg.exec_()
            else:
                conn = sqlite3.connect('SWAAD.db')
                cursor = conn.cursor()
                sql = ('''INSERT INTO LOGIN(USER,PASSWORD) VALUES(?,?);''')
                cursor.execute(sql, (u2, pass2))
                conn.commit()
                conn.close()
                msg = QMessageBox()
                msg.setIcon(QMessageBox.Information)
                msg.setText("User Added Successfully")
                msg.setWindowTitle("SWAAD BAKERS")
                msg.exec_()
                self.lineEdit_signuser.setText("")
                self.lineEdit_signpass.setText("")
                self.stackedWidget.setCurrentIndex(2)
        except Exception as error:
            print(error)

    def login(self):
        u1 = self.lineEdit_loginuser.text()
        pass1 = self.lineEdit_loginpass.text()
        try:
            conn = sqlite3.connect('SWAAD.db')
            cursor = conn.cursor()
            sql = 'SELECT * FROM LOGIN WHERE USER  = ? and PASSWORD = ?;'
            cursor.execute(sql, (u1, pass1))
            row = cursor.fetchone()
            if row == None:
                msg = QMessageBox()
                msg.setIcon(QMessageBox.Critical)
                msg.setText("USERNAME OR PASSWORD IS INCORRECT")
                msg.setWindowTitle("SWAAD BAKERS")
                msg.exec_()
                self.lineEdit_loginpass.setText("")
                self.lineEdit_loginuser.setText("")
            elif self.lineEdit_loginuser.text() == 'admin':
                msg = QMessageBox()
                msg.setIcon(QMessageBox.Information)
                msg.setText("SUCCESSFULLY LOGGED IN")
                msg.setWindowTitle("SWAAD BAKERS")
                msg.exec_()
                self.lineEdit_loginpass.setText("")
                self.lineEdit_loginuser.setText("")
                self.stackedWidget.setCurrentIndex(2)
            elif len(u1) == 0:
                msg = QMessageBox()
                msg.setIcon(QMessageBox.Critical)
                msg.setText("USERNAME OR PASSWORD cannot be blank")
                msg.setWindowTitle("SWAAD BAKERS")
                msg.exec_()
                self.lineEdit_loginpass.setText("")
                self.lineEdit_loginuser.setText("")
            else:
                msg = QMessageBox()
                msg.setIcon(QMessageBox.Information)
                msg.setText("SUCCESSFULLY LOGGED IN")
                msg.setWindowTitle("SWAAD BAKERS")
                msg.exec_()
                self.lineEdit_loginpass.setText("")
                self.lineEdit_loginuser.setText("")
                self.stackedWidget.setCurrentIndex(3)
        except Exception as error:
            print(error)

    def ashiftreports(self):
        self.lineEdit_salesreport.setText("ADMIN")
        self.stackedWidget.setCurrentIndex(4)

    def ushiftreports(self):
        self.lineEdit_salesreport.setText("USER")
        self.stackedWidget.setCurrentIndex(4)

    def ashiftcat(self):
        self.lineEdit_category.setText("ADMIN")
        self.stackedWidget.setCurrentIndex(5)

    def ushiftcat(self):
        self.lineEdit_category.setText("USER")
        self.stackedWidget.setCurrentIndex(5)

    def ashiftpro(self):
        self.lineEdit_products.setText("ADMIN")
        self.stackedWidget.setCurrentIndex(6)

    def ushiftpro(self):
        self.lineEdit_products.setText("USER")
        self.stackedWidget.setCurrentIndex(6)

    def ashiftpur(self):
        self.lineEdit_purchase.setText("ADMIN")
        self.stackedWidget.setCurrentIndex(7)

    def ushiftpur(self):
        self.lineEdit_purchase.setText("USER")
        self.stackedWidget.setCurrentIndex(7)

    def ashiftord(self):
        self.lineEdit_salesorder.setText("ADMIN")
        self.stackedWidget.setCurrentIndex(8)

    def ushiftord(self):
        self.lineEdit_salesorder.setText("USER")
        self.stackedWidget.setCurrentIndex(8)

    def backpage(self):
        if self.lineEdit_salesreport.text() == 'ADMIN' or self.lineEdit_category.text() == 'ADMIN' or self.lineEdit_products.text() == 'ADMIN' or self.lineEdit_salesorder.text() == 'ADMIN' or self.lineEdit_purchase.text() == 'ADMIN':
            self.stackedWidget.setCurrentIndex(2)
        else:
            self.stackedWidget.setCurrentIndex(3)

    def addcat(self):
        cid = self.lineEdit_catid.text()
        cname = self.lineEdit_catname.text()
        try:
            conn = sqlite3.connect('SWAAD.db')
            cursor = conn.cursor()
            sql = ('''INSERT INTO CATEGORY(CAT_ID,CAT_NAME) VALUES(?,?);''')
            cursor.execute(sql, (cid, cname))
            conn.commit()
            conn.close()
            self.lineEdit_catid.setText("")
            self.lineEdit_catname.setText("")
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Information)
            msg.setText("SUCCESSFULLY ADDED")
            msg.setWindowTitle("SWAAD BAKERS")
            msg.exec_()
        except Exception as error:
            print(error)

    def delcat(self):
        cid = self.lineEdit_catid.text()
        cname = self.lineEdit_catname.text()
        try:
            if cname == '':
                conn = sqlite3.connect('SWAAD.db')
                cursor = conn.cursor()
                sql = ('''DELETE FROM CATEGORY WHERE CAT_ID = ?''')
                cursor.execute(sql, (cid,))
                conn.commit()
                conn.close()
                self.lineEdit_catid.setText("")
                self.lineEdit_catname.setText("")
                msg = QMessageBox()
                msg.setIcon(QMessageBox.Information)
                msg.setText("SUCCESSFULLY DELETED")
                msg.setWindowTitle("SWAAD BAKERS")
                msg.exec_()
            elif cid == '':
                conn = sqlite3.connect('SWAAD.db')
                cursor = conn.cursor()
                sql = ('''DELETE FROM CATEGORY WHERE CAT_NAME = ?''')
                cursor.execute(sql, (cname,))
                conn.commit()
                conn.close()
                self.lineEdit_catid.setText("")
                self.lineEdit_catname.setText("")
                msg = QMessageBox()
                msg.setIcon(QMessageBox.Information)
                msg.setText("SUCCESSFULLY DELETED")
                msg.setWindowTitle("SWAAD BAKERS")
                msg.exec_()
            else:
                msg = QMessageBox()
                msg.setIcon(QMessageBox.Critical)
                msg.setText("FIELDS ARE EMPTY")
                msg.setWindowTitle("SWAAD BAKERS")
                msg.exec_()
        except Exception as error:
            print(error)

    def clearcat(self):
        self.lineEdit_catid.setText("")
        self.lineEdit_catname.setText("")

    def addpr(self):
        com = str(self.comboBox.currentText())
        pr_id = self.lineEdit_productid.text()
        pr_name = self.lineEdit_productname.text()
        pr_desc = self.lineEdit_productdesc.text()
        pr_price = self.lineEdit_productprice.text()
        pr_kgs = self.lineEdit_productweight.text()
        pr_qty = self.lineEdit_productqty.text()
        try:
            if self.lineEdit_productid.text() == '' or self.lineEdit_productname.text() == '' or self.lineEdit_productdesc.text() == '' or self.lineEdit_productprice.text() == '' or self.lineEdit_productweight.text() == '' or self.lineEdit_productqty.text() == '':
                msg = QMessageBox()
                msg.setIcon(QMessageBox.Critical)
                msg.setText("SOME FIELD MISSING")
                msg.setWindowTitle("SWAAD BAKERS")
                msg.exec_()
            else:
                conn = sqlite3.connect('SWAAD.db')
                cursor = conn.cursor()
                sql = (
                    '''INSERT INTO PRODUCTS(CAT_NAME,PRODUCT_ID,PRODUCT_NAME,DESCRIPTION,PRICE,KGS,QUANTITY) VALUES(?,?,?,?,?,?,?);''')
                cursor.execute(sql, (com, pr_id, pr_name, pr_desc, pr_price, pr_kgs, pr_qty))
                conn.commit()
                conn.close()
                self.lineEdit_productid.setText("")
                self.lineEdit_productname.setText("")
                self.lineEdit_productprice.setText("")
                self.lineEdit_productdesc.setText("")
                self.lineEdit_productweight.setText("")
                self.lineEdit_productqty.setText("")
                msg = QMessageBox()
                msg.setIcon(QMessageBox.Information)
                msg.setText("SUCCESSFULLY ADDED")
                msg.setWindowTitle("SWAAD BAKERS")
                msg.exec_()
        except Exception as error:
            print(error)

    def updatepr(self):
        pid = self.lineEdit_productid.text()
        price = self.lineEdit_productprice.text()
        qty = self.lineEdit_productqty.text()
        try:
            if pid and price and qty != "":
                conn = sqlite3.connect('SWAAD.db')
                cursor = conn.cursor()
                sql = ('UPDATE PRODUCTS SET PRICE = ?, QUANTITY = QUANTITY + ? WHERE PRODUCT_ID = ?')
                cursor.execute(sql, (price, int(qty), pid))
                conn.commit()
                conn.close()
                msg = QMessageBox()
                msg.setIcon(QMessageBox.Information)
                msg.setWindowTitle("SWAAD BAKERS")
                msg.setText("PRICE AND QUANTITY UPDATED")
                msg.exec_()
            else:
                msg = QMessageBox()
                msg.setIcon(QMessageBox.Critical)
                msg.setWindowTitle("SWAAD BAKERS")
                msg.setText("ENTER PRICE QUANTITY AND PRODUCT ID FOR UPDATION !")
                msg.exec_()
        except Exception as error:
            print(error)

    def delpr(self):
        pr_id = self.lineEdit_productid.text()
        try:
            if pr_id != '':
                conn = sqlite3.connect('SWAAD.db')
                cursor = conn.cursor()
                sql = ('''DELETE FROM PRODUCTS WHERE PRODUCT_ID = ?''')
                cursor.execute(sql, (pr_id,))
                conn.commit()
                conn.close()
                self.lineEdit_productid.setText("")
                msg = QMessageBox()
                msg.setIcon(QMessageBox.Information)
                msg.setText("SUCCESSFULLY DELETED")
                msg.setWindowTitle("SWAAD BAKERS")
                msg.exec_()
            else:
                msg = QMessageBox()
                msg.setIcon(QMessageBox.Critical)
                msg.setText("ENTER PRODUCT ID")
                msg.setWindowTitle("SWAAD BAKERS")
                msg.exec_()
        except Exception as error:
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Information)
            msg.setText("PRODUCT ID EMPTY !!!")
            msg.setWindowTitle("SWAAD BAKERS")
            msg.exec_()

    def clearpr(self):
        self.lineEdit_productid.setText("")
        self.lineEdit_productname.setText("")
        self.lineEdit_productdesc.setText("")
        self.lineEdit_productprice.setText("")
        self.lineEdit_productweight.setText("")
        self.lineEdit_productqty.setText("")

    def combox(self):
        try:
            if self.comboBox.currentText() == "":
                a = []
                conn = sqlite3.connect('SWAAD.db')
                cursor = conn.cursor()
                sql = ('''SELECT * FROM CATEGORY''')
                cursor.execute(sql, )
                b = cursor.fetchall()
                bb = len(b)
                # print(bb)
                for i in range(bb):
                    a.append(b[i][1])
                self.comboBox.addItems(a)
                conn.commit()
                conn.close()
        except Exception as error:
            print(error)

    # sales
    def taketable(self):
        pid = self.lineEdit_salesid.text()
        try:
            if pid != '':
                a = []
                conn = sqlite3.connect('SWAAD.db')
                cursor = conn.cursor()
                sql = ('''SELECT * FROM PRODUCTS WHERE PRODUCT_ID = ?''')
                cursor.execute(sql, (pid,))
                b = cursor.fetchone()
                for b in b:
                    a.append(b)
                self.lineEdit_salesname.setText(a[2])
                self.lineEdit_salesprice.setText(a[4])
                self.lineEdit_salesqty.setFocus()
                conn.commit()
                conn.close()
            else:
                msg = QMessageBox()
                msg.setIcon(QMessageBox.Critical)
                msg.setText("NO SUCH PRODUCT ID")
                msg.setWindowTitle("SWAAD BAKERS")
                msg.exec_()
        except Exception as error:
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Critical)
            msg.setText("NO SUCH PRODUCT ID")
            msg.setWindowTitle("SWAAD BAKERS")
            msg.exec_()

    def loaddata(self):
        try:
            conn = sqlite3.connect('SWAAD.db')
            cursor = conn.cursor()
            sql = ("SELECT * FROM DATA")
            result = cursor.execute(sql)
            self.tableWidget_sales.setRowCount(0)
            for row_number, row_data in enumerate(result):
                self.tableWidget_sales.insertRow(row_number)
                for column_number, data in enumerate(row_data):
                    self.tableWidget_sales.setItem(row_number, column_number, QtWidgets.QTableWidgetItem(str(data)))
            conn.commit()
            conn.close()
        except Exception as error:
            print(error)

    def addmore(self):
        Pr_Id = self.lineEdit_salesid.text()
        Pr_Name = self.lineEdit_salesname.text()
        Unit_Cost = self.lineEdit_salesprice.text()
        Quantity = self.lineEdit_salesqty.text()
        salesno = self.lineEdit_salesno_2.text()
        try:
            if Pr_Id and Pr_Name and Unit_Cost and Quantity != "":
                global B
                global p
                global d
                d = d + 6
                A = int(Unit_Cost) * int(Quantity)
                B = B + A
                A = str(A)
                conn = sqlite3.connect('SWAAD.db')
                cursor = conn.cursor()
                sql = ('''INSERT INTO DATA(PRODUCT_ID,PRODUCT_NAME,PRICE,QUANTITY,TOTAL) VALUES(?,?,?,?,?);''')
                cursor.execute(sql, (Pr_Id, Pr_Name, Unit_Cost, Quantity, A))
                conn.commit()
                conn.close()
                conn = sqlite3.connect("SWAAD.db")
                cursor = conn.cursor()
                sql = ('''UPDATE PRODUCTS SET QUANTITY = QUANTITY - ? WHERE PRODUCT_ID = ?''')
                cursor.execute(sql, (Quantity, Pr_Id))
                conn.commit()
                conn.close()
                conn = sqlite3.connect('SWAAD.db')
                cursor = conn.cursor()
                sql = ('''INSERT INTO SALES_PR(SALES_NO,PRODUCT_ID,PRODUCT_NAME,PRICE,QUANTITY,TOTAL) VALUES(?,?,?,?,?,?);''')
                cursor.execute(sql, (salesno, Pr_Id, Pr_Name, Unit_Cost, Quantity, A))
                conn.commit()
                conn.close()
                p.drawString(25, d, Pr_Id)
                p.drawString(75, d, Pr_Name)
                p.drawString(125, d, Unit_Cost)
                p.drawString(148, d, Quantity)
                p.drawString(173, d, A)
                self.lineEdit_salestotal.setText(str(B))
                self.lineEdit_salesid.setText("")
                self.lineEdit_salesname.setText("")
                self.lineEdit_salesprice.setText("")
                self.lineEdit_salesqty.setText("")
                self.lineEdit_salesid.setFocus()
        except Exception as error:
            print("addmore", error)

    def cleartable(self):
        conn = sqlite3.connect('SWAAD.db')
        cursor = conn.cursor()
        sql = ('''DELETE FROM DATA''')
        cursor.execute(sql, )
        conn.commit()
        conn.close()
        conn = sqlite3.connect('SWAAD.db')
        cursor = conn.cursor()
        sql = ('SELECT * FROM DATA')
        result = cursor.execute(sql)
        # self.tableWidget_sales.setRowCount(0)
        # for row_number, row_data in enumerate(result):
        #     self.tableWidget_sales.insertRow(row_number)
        #     for column_number, data in enumerate(row_data):
        #         self.tableWidget_sales.setItem(row_number, column_number,
        #                                        QtWidgets.QTableWidgetItem(str(data)))
        self.tableWidget_purchase.setRowCount(0)
        for row_number, row_data in enumerate(result):
            self.tableWidget_purchase.insertRow(row_number)
            for column_number, data in enumerate(row_data):
                self.tableWidget_purchase.setItem(row_number, column_number,
                                               QtWidgets.QTableWidgetItem(str(data)))
        conn.commit()
        conn.close()
        self.lineEdit_salestotal.setText("")
        global B
        B = 0
        msg = QMessageBox()
        msg.setIcon(QMessageBox.Information)
        msg.setText("CLEARED")
        msg.setWindowTitle("SWAAD BAKERS")
        msg.exec_()
        a = self.lineEdit_salesno_2.text()
        a = int(a) + 1
        self.lineEdit_salesno_2.setText(str(a))

    def sales(self):
        da = self.dateEdit_3.text()
        sale = self.lineEdit_salestotal.text()
        bno = self.lineEdit_salesno_2.text()
        try:
            global p
            pr = round(int(sale) * 12 / 100)
            pr = str(pr)
            p.drawString(173, 217, sale)
            conn = sqlite3.connect('SWAAD.db')
            cursor = conn.cursor()
            sql = ('''INSERT INTO SALES(SALES_NO,DATE,TOTAL,PROFIT) VALUES(?,?,?,?);''')
            cursor.execute(sql, (bno, da, sale, pr))
            conn.commit()
            conn.close()
            global d
            d = 94
            p.showPage
            p.save()
            global B
            B = 0
            webbrowser.open("swaad.pdf")
        except Exception as error:
            print(error)

    # sales report
    def prreportgenerate(self):
        fd = self.dateEdit.text()
        sd = self.dateEdit_2.text()
        fds = fd.replace("-", " ")
        sds = sd.replace("-", " ")
        # fdss = datetime.strptime(fds, '%d %b %Y')
        # sdss = datetime.strptime(sds, '%d %b %Y')
        fdss = datetime.strptime(fds, '%d %m %Y')
        sdss = datetime.strptime(sds, '%d %m %Y')
        try:
            if fdss <= sdss:
                c = canvas.Canvas("SWAADBAKERS-REPORTS-PROFIT.pdf", pagesize=(200, 250), bottomup=0)
                c.translate(10, 40)
                c.scale(1, -1)
                c.drawImage("logo.jpg", 0, 0, width=50, height=30)
                c.scale(1, -1)
                c.translate(-10, -40)
                c.setFont("Helvetica-Bold", 10)
                c.drawCentredString(125, 20, "SWAAD BAKERS")
                c.line(70, 22, 180, 22)
                c.setFont("Helvetica-Bold", 5)
                c.drawCentredString(125, 30, "SWAAD PROFIT REPORTS")
                c.line(5, 45, 195, 45)
                c.setFont("Courier-Bold", 8)
                c.setFont("Times-Bold", 5)
                c.drawRightString(70, 50, "FROM DATE :")
                c.drawRightString(70, 60, "TO   DATE :")
                c.drawString(90, 50, fd)
                c.drawString(90, 60, sd)
                c.line(15, 80, 185, 80)
                c.drawString(40, 85, "DATE")
                c.drawString(110, 85, "TOTAL")
                c.drawString(150, 85, "PROFIT")
                c.line(15, 92, 185, 92)
                c.line(15, 230, 185, 230)
                c.line(100, 230, 100, 238)
                p.drawRightString(180, 235, "Authorised Signatory")
                p.drawImage("seal.png", 143, 202, width=30, height=30)
                conn = sqlite3.connect('SWAAD.db')
                cursor = conn.cursor()
                sql = ('''SELECT DATE,TOTAL,PROFIT FROM SALES''')
                cursor.execute(sql, )
                b = cursor.fetchall()
                bb = len(b)
                a = []
                j = []
                l = []
                s = 0
                y = 90
                for b in b:
                    fd = fd.replace("-", " ")
                    sd = sd.replace("-", " ")
                    ex = b[0].replace("-", " ")
                    fdd = datetime.strptime(fd, '%d %m %Y')
                    sdd = datetime.strptime(sd, '%d %m %Y')
                    exd = datetime.strptime(ex, '%d %m %Y')
                    if fdd <= exd and sdd >= exd:
                        a.append(b)
                        y = y + 7
                        c.drawString(40, y, a[s][0])
                        c.drawString(110, y, a[s][1])
                        c.drawString(150, y, a[s][2])
                        s = s + 1
                for i in range(len(a)):
                    m = int(a[i][1])
                    n = int(a[i][2])
                    j.append(m)
                    l.append(n)
                k = sum(j)
                z = sum(l)
                # z=z//len(l)
                c.drawString(20, 236, "TOTAL")
                c.drawString(45, 236, "TOTAL PROFIT")
                c.drawString(20, 241, str(k))
                c.drawString(50, 241, str(z))
                conn.commit()
                conn.close()
                c.showPage()
                c.save()
                webbrowser.open("SWAADBAKERS-REPORTS-PROFIT.pdf")
            else:
                msg = QMessageBox()
                msg.setIcon(QMessageBox.Critical)
                msg.setWindowTitle("SWAAD BAKERS")
                msg.setText("DATE ERROR")
                msg.exec_()
        except Exception as error:
            print(error)

    def reportgenerate(self):
        fd = self.dateEdit.text()
        sd = self.dateEdit_2.text()
        fds = fd.replace("-", " ")
        sds = sd.replace("-", " ")
        fdss = datetime.strptime(fds, '%d %m %Y')
        sdss = datetime.strptime(sds, '%d %m %Y')
        try:
            if fdss <= sdss:
                c = canvas.Canvas("SWAAD BAKERS-REPORTS.pdf", pagesize=(200, 250), bottomup=0)
                c.translate(10, 40)
                c.scale(1, -1)
                c.drawImage("logo.jpg", 0, 0, width=50, height=30)
                c.scale(1, -1)
                c.translate(-10, -40)
                c.setFont("Helvetica-Bold", 10)
                c.drawCentredString(125, 20, "SWAAD BAKERS")
                c.line(70, 22, 180, 22)
                c.setFont("Helvetica-Bold", 5)
                c.drawCentredString(125, 30, "SWAAD BAKERS SALES REPORTS")
                c.line(5, 45, 195, 45)
                c.setFont("Courier-Bold", 8)
                c.setFont("Times-Bold", 5)
                c.drawRightString(70, 50, "FROM DATE :")
                c.drawRightString(70, 60, "TO   DATE :")
                c.drawString(90, 50, fd)
                c.drawString(90, 60, sd)
                c.line(15, 80, 185, 80)
                c.drawString(40, 85, "DATE")
                c.drawString(110, 85, "TOTAL")
                c.line(15, 92, 185, 92)
                c.line(15, 230, 185, 230)
                c.line(100, 230, 100, 238)
                p.drawRightString(180, 235, "Authorised Signatory")
                p.drawImage("seal.png", 143, 202, width=30, height=30)
                conn = sqlite3.connect('SWAAD.db')
                cursor = conn.cursor()
                sql = ('''SELECT DATE,TOTAL FROM SALES''')
                cursor.execute(sql, )
                b = cursor.fetchall()
                bb = len(b)
                a = []
                j = []
                l = []
                s = 0
                y = 90
                for b in b:
                    fd = fd.replace("-", " ")
                    sd = sd.replace("-", " ")
                    ex = b[0].replace("-", " ")
                    fdd = datetime.strptime(fd, '%d %m %Y')
                    sdd = datetime.strptime(sd, '%d %m %Y')
                    exd = datetime.strptime(ex, '%d %m %Y')
                    if fdd <= exd and sdd >= exd:
                        a.append(b)
                        y = y + 7
                        c.drawString(40, y, a[s][0])
                        c.drawString(110, y, a[s][1])
                        s = s + 1
                for i in range(len(a)):
                    m = int(a[i][1])
                    j.append(m)
                k = sum(j)
                c.drawString(20, 236, "TOTAL")
                c.drawString(20, 241, str(k))
                conn.commit()
                conn.close()
                c.showPage()
                c.save()
                webbrowser.open("SWAADBAKERS-REPORTS.pdf")
            else:
                msg = QMessageBox()
                msg.setIcon(QMessageBox.Critical)
                msg.setWindowTitle("SWAAD BALERS")
                msg.setText("DATE ERROR")
                msg.exec_()
        except Exception as error:
            print(error)

    # salesorder
    def pgetpid(self):
        try:
            conn = sqlite3.connect('SWAAD.db')
            cursor = conn.cursor()
            sql = ('''SELECT PRODUCT_ID FROM PRODUCTS''')
            cursor.execute(sql, )
            b = cursor.fetchall()
            data = [datum[0] for datum in b]
            # print(data)
            conn.commit()
            conn.close()
            completer = QCompleter(data)
            self.lineEdit_salesid.setCompleter(completer)
        except Exception as error:
            print(error)

    # product
    def prgetpid(self):
        try:
            conn = sqlite3.connect('SWAAD.db')
            cursor = conn.cursor()
            sql = ('''SELECT PRODUCT_ID FROM PRODUCTS''')
            cursor.execute(sql, )
            b = cursor.fetchall()
            data = [datum[0] for datum in b]
            # print(data)
            conn.commit()
            conn.close()
            completer = QCompleter(data)
            self.lineEdit_productid.setCompleter(completer)
        except Exception as error:
            print(error)

    def pdfpos(self):
        global p
        try:
            p = canvas.Canvas("swaad.pdf", pagesize=(200, 250), bottomup=0)
            p.translate(10, 40)
            p.scale(1, -1)
            p.drawImage("logo.jpg", 0, 0, width=50, height=30)
            p.scale(1, -1)
            p.translate(-10, -40)
            p.setFont("Helvetica-Bold", 10)
            p.drawCentredString(125, 20, "SWAAD BAKERS")
            p.line(70, 22, 180, 22)
            p.setFont("Helvetica-Bold", 5)
            p.drawCentredString(125, 30, "SALES ORDER")
            p.drawCentredString(125, 35, "SWAAD BAKERS KANHANGAD")
            p.line(5, 45, 195, 45)
            p.setFont("Courier-Bold", 8)
            p.setFont("Times-Bold", 5)
            p.drawRightString(70, 50, "INVOICE No. :")
            no = self.lineEdit_salesno_2.text()
            p.drawString(90, 50, no)
            p.drawRightString(70, 60, "DATE :")
            e = self.dateEdit_3.text()
            p.drawString(90, 60, e)
            p.line(15, 80, 185, 80)
            p.line(15, 92, 185, 92)
            p.drawCentredString(25, 89, "PR-ID.")
            p.drawCentredString(75, 89, "PR-NAME")
            p.drawCentredString(125, 89, "RATE")
            p.drawCentredString(148, 89, "QTY")
            p.drawCentredString(173, 89, "TOTAL")
            p.drawCentredString(25, 217, "TOTAL")
            p.line(15, 220, 185, 220)
            p.line(100, 220, 100, 238)
            p.drawRightString(180, 235, "Authorised Signatory")
            p.drawImage("seal.png", 143,202, width=30, height=30)
        except Exception as error:
            print("pdf making", error)

    # purchase order
    def takepurtable(self):
        pid = self.lineEdit_purchaseid.text()
        try:
            if pid != '':
                a = []
                conn = sqlite3.connect('SWAAD.db')
                cursor = conn.cursor()
                sql = ('''SELECT * FROM PRODUCTS WHERE PRODUCT_ID = ?''')
                cursor.execute(sql, (pid,))
                b = cursor.fetchone()
                for b in b:
                    a.append(b)
                self.lineEdit_purchasename.setText(a[2])
                self.lineEdit_purchaseprice.setText(a[4])
                self.lineEdit_purchaseqty.setFocus()
                conn.commit()
                conn.close()
            else:
                msg = QMessageBox()
                msg.setIcon(QMessageBox.Critical)
                msg.setText("NO SUCH PRODUCT-ID")
                msg.setWindowTitle("SWAAD BAKERS")
                msg.exec_()
        except Exception as error:
            print(error)

    def purpid(self):
        try:
            conn = sqlite3.connect('SWAAD.db')
            cursor = conn.cursor()
            sql = ('''SELECT PRODUCT_ID FROM PRODUCTS''')
            cursor.execute(sql, )
            b = cursor.fetchall()
            data = [datum[0] for datum in b]
            # print(data)
            conn.commit()
            conn.close()
            completer = QCompleter(data)
            self.lineEdit_purchaseid.setCompleter(completer)
        except Exception as error:
            print(error)

    def addmorepur(self):
        global r
        Pr_Id = self.lineEdit_purchaseid.text()
        Pr_Name = self.lineEdit_purchasename.text()
        Unit_Cost = self.lineEdit_purchaseprice.text()
        Quantity = self.lineEdit_purchaseqty.text()
        try:
            if Pr_Id and Pr_Name and Unit_Cost and Quantity != "":
                q = int(Unit_Cost) * int(Quantity)
                r = r + q
                q = str(q)
                conn = sqlite3.connect('SWAAD.db')
                cursor = conn.cursor()
                sql = ('''INSERT INTO PURCHASE(PRODUCT_ID,PRODUCT_NAME,PRICE,QUANTITY,TOTAL) VALUES(?,?,?,?,?);''')
                cursor.execute(sql, (Pr_Id, Pr_Name, Unit_Cost, Quantity, q))
                conn.commit()
                conn.close()
                conn = sqlite3.connect("SWAAD.db")
                cursor = conn.cursor()
                sql = ('''UPDATE PRODUCTS SET PRODUCT_NAME = ?, PRICE = ? , QUANTITY = QUANTITY + ? WHERE PRODUCT_ID = ?''')
                cursor.execute(sql, (Pr_Name, Unit_Cost, Quantity, Pr_Id))
                conn.commit()
                conn.close()
                self.lineEdit_purchasetotal.setText(str(r))
                self.lineEdit_purchaseqty.setText("")
                self.lineEdit_purchaseprice.setText("")
                self.lineEdit_purchasename.setText("")
                self.lineEdit_purchaseid.setText("")
            else:
                msg = QMessageBox()
                msg.setIcon(QMessageBox.Critical)
                msg.setWindowTitle("SWAAD BAKERS")
                msg.setText("INCORRECT PRODUCT ID")
                msg.exec_()
        except Exception as error:
            print(error)

    def loadpurdata(self):
        try:
            conn = sqlite3.connect('SWAAD.db')
            cursor = conn.cursor()
            sql = ("SELECT * FROM PURCHASE")
            result = cursor.execute(sql)
            self.tableWidget_purchase.setRowCount(0)
            for row_number, row_data in enumerate(result):
                self.tableWidget_purchase.insertRow(row_number)
                for column_number, data in enumerate(row_data):
                    self.tableWidget_purchase.setItem(row_number, column_number, QtWidgets.QTableWidgetItem(str(data)))

            conn.commit()
            conn.close()
        except Exception as error:
            print(error)

    def savepur(self):
        try:
            global r
            r = 0
            conn = sqlite3.connect('SWAAD.db')
            cursor = conn.cursor()
            sql = ("DELETE FROM PURCHASE")
            result = cursor.execute(sql)
            conn.commit()
            conn.close()
            conn = sqlite3.connect('SWAAD.db')
            cursor = conn.cursor()
            sql = ("SELECT * FROM PURCHASE")
            result = cursor.execute(sql)
            self.tableWidget_purchase.setRowCount(0)
            for row_number, row_data in enumerate(result):
                self.tableWidget_purchase.insertRow(row_number)
                for column_number, data in enumerate(row_data):
                    self.tableWidget_purchase.setItem(row_number, column_number, QtWidgets.QTableWidgetItem(str(data)))

            conn.commit()
            conn.close()
            self.lineEdit_purchaseid.setText("")
            self.lineEdit_purchasename.setText("")
            self.lineEdit_purchaseprice.setText("")
            self.lineEdit_purchaseqty.setText("")
        except Exception as error:
            print(error)


import swaad_rc

if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    Swaad = QtWidgets.QMainWindow()
    ui = Ui_Swaad()
    ui.setupUi(Swaad)
    Swaad.show()
    sys.exit(app.exec_())
